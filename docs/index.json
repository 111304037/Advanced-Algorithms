{
  "api/Advanced.Algorithms.BitAlgorithms.BaseConversion.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.BaseConversion.html",
    "title": "Class BaseConversion | Advanced Algorithms",
    "keywords": "Class BaseConversion Inheritance Object BaseConversion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class BaseConversion Methods Convert(String, String, String, Int32) Converts base of given number Declaration public static string Convert(string srcNumber, string srcBaseChars, string dstBaseChars, int precision = 32) Parameters Type Name Description String srcNumber input number in source base system String srcBaseChars Should be in correct order => eg. 0123456789 for decimal String dstBaseChars Should be in correct order => eg. 01 for binary Int32 precision Precision. Returns Type Description String"
  },
  "api/Advanced.Algorithms.BitAlgorithms.BitHacks.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.BitHacks.html",
    "title": "Class BitHacks | Advanced Algorithms",
    "keywords": "Class BitHacks Inheritance Object BitHacks Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class BitHacks Methods CountSetBits(Int32) Returns the number of set bits in given integer x Declaration public static int CountSetBits(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 CountTrailingZerosByBinarySearch(Int32) Counts the number of trailing zero bits in an efficient manner Declaration public static int CountTrailingZerosByBinarySearch(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 GetRightmostSubBitsStartingWithAnUnsetBit(Int32) Gets the first right most sub bits starting with a Unset bit, with rightmost being 0th bit eg. 1011 => 0011 Declaration public static int GetRightmostSubBitsStartingWithAnUnsetBit(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 GetRightmostSubBitsStartingWithASetBit(Int32) Gets the first right most sub bits starting with a set bit, with rightmost being 0th bit Declaration public static int GetRightmostSubBitsStartingWithASetBit(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 HasOppositeSigns(Int32, Int32) Checks if given numbers are of opposite signs Declaration public static bool HasOppositeSigns(int x, int y) Parameters Type Name Description Int32 x Int32 y Returns Type Description Boolean IsEven(Int32) Checks if given number is even Declaration public static bool IsEven(int x) Parameters Type Name Description Int32 x Returns Type Description Boolean IsPowerOf2(Int32) Checks if given number is a power of 2 Declaration public static bool IsPowerOf2(int x) Parameters Type Name Description Int32 x Returns Type Description Boolean IsSet(Int32, Int32) Checks if nth bit from right is set, with rightmost being 0th bit Declaration public static bool IsSet(int x, int n) Parameters Type Name Description Int32 x Int32 n Returns Type Description Boolean RightPropogateRightmostSetBit(Int32) Sets all the first right most sub bits starting with a set bit, with rightmost being 0th bit Declaration public static int RightPropogateRightmostSetBit(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 RightPropogateRightmostUnsetBit(Int32) UnSets all the first right most sub bits starting with a unset bit, with rightmost being 0th bit Declaration public static int RightPropogateRightmostUnsetBit(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 SetBit(Int32, Int32) Sets nth bit from right, with rightmost being 0th bit Declaration public static int SetBit(int x, int n) Parameters Type Name Description Int32 x Int32 n Returns Type Description Int32 ToggleBit(Int32, Int32) Toggles nth bit from right, with rightmost being 0th bit Declaration public static int ToggleBit(int x, int n) Parameters Type Name Description Int32 x Int32 n Returns Type Description Int32 TurnOffRightmostSetBit(Int32) Turns Off first set bit from right, with rightmost being 0th bit Declaration public static int TurnOffRightmostSetBit(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 TurnOnBitAfterRightmostSetBit(Int32) Turns On first Unset bit from right, with rightmost being 0th bit Declaration public static int TurnOnBitAfterRightmostSetBit(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 UnsetBit(Int32, Int32) Unsets nth bit from right, with rightmost being 0th bit Declaration public static int UnsetBit(int x, int n) Parameters Type Name Description Int32 x Int32 n Returns Type Description Int32 UpdateBitToValue(Int32, Int32, Boolean) Update the nth bit from right with given boolean value, with rightmost being 0th bit Declaration public static int UpdateBitToValue(int x, int n, bool value) Parameters Type Name Description Int32 x Int32 n Boolean value Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.BitAlgorithms.CalcLogarithm.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.CalcLogarithm.html",
    "title": "Class CalcLogarithm | Advanced Algorithms",
    "keywords": "Class CalcLogarithm Inheritance Object CalcLogarithm Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class CalcLogarithm Methods CalcBase10LogFloor(Int32) Declaration public static int CalcBase10LogFloor(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 CalcBase2LogFloor(Int32) Declaration public static int CalcBase2LogFloor(int x) Parameters Type Name Description Int32 x Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.BitAlgorithms.DivisionModulus.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.DivisionModulus.html",
    "title": "Class DivisionModulus | Advanced Algorithms",
    "keywords": "Class DivisionModulus Compute modulus division by power of 2 without a division operator. Inheritance Object DivisionModulus Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class DivisionModulus Methods GetModulus(Int32, Int32) Declaration public static int GetModulus(int numerator, int denominator) Parameters Type Name Description Int32 numerator Int32 denominator Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.BitAlgorithms.Gcd.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.Gcd.html",
    "title": "Class Gcd | Advanced Algorithms",
    "keywords": "Class Gcd Inheritance Object Gcd Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class Gcd Methods Find(Int32, Int32) Declaration public static int Find(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.BitAlgorithms.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.html",
    "title": "Namespace Advanced.Algorithms.BitAlgorithms | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.BitAlgorithms Classes BaseConversion BitHacks CalcLogarithm DivisionModulus Compute modulus division by power of 2 without a division operator. Gcd IntToBinary IsMultipleOfNine IsMultipleOfThree NextPowOfTwo ToggleCase"
  },
  "api/Advanced.Algorithms.BitAlgorithms.IntToBinary.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.IntToBinary.html",
    "title": "Class IntToBinary | Advanced Algorithms",
    "keywords": "Class IntToBinary Inheritance Object IntToBinary Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class IntToBinary Methods GetBinary(Int32, Int32) Declaration public static string GetBinary(int integer, int precision) Parameters Type Name Description Int32 integer Int32 precision Returns Type Description String"
  },
  "api/Advanced.Algorithms.BitAlgorithms.IsMultipleOfNine.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.IsMultipleOfNine.html",
    "title": "Class IsMultipleOfNine | Advanced Algorithms",
    "keywords": "Class IsMultipleOfNine Inheritance Object IsMultipleOfNine Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class IsMultipleOfNine Methods IsTrue(Int32) Declaration public static bool IsTrue(int x) Parameters Type Name Description Int32 x Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.BitAlgorithms.IsMultipleOfThree.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.IsMultipleOfThree.html",
    "title": "Class IsMultipleOfThree | Advanced Algorithms",
    "keywords": "Class IsMultipleOfThree Inheritance Object IsMultipleOfThree Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class IsMultipleOfThree Methods IsTrue(Int32) Based on the observation that a number is multiple of 3 if difference of odd and even set bits in binary form of the number is also a multiple of 3. Declaration public static bool IsTrue(int v) Parameters Type Name Description Int32 v Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.BitAlgorithms.NextPowOfTwo.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.NextPowOfTwo.html",
    "title": "Class NextPowOfTwo | Advanced Algorithms",
    "keywords": "Class NextPowOfTwo Inheritance Object NextPowOfTwo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class NextPowOfTwo"
  },
  "api/Advanced.Algorithms.BitAlgorithms.ToggleCase.html": {
    "href": "api/Advanced.Algorithms.BitAlgorithms.ToggleCase.html",
    "title": "Class ToggleCase | Advanced Algorithms",
    "keywords": "Class ToggleCase Inheritance Object ToggleCase Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.BitAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class ToggleCase Methods Toggle(String) Declaration public static string Toggle(string s) Parameters Type Name Description String s Returns Type Description String"
  },
  "api/Advanced.Algorithms.Combinatorics.Combination.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Combination.html",
    "title": "Class Combination | Advanced Algorithms",
    "keywords": "Class Combination Inheritance Object Combination Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Combination Methods Find<T>(List<T>, Int32, Boolean) Declaration public static List<List<T>> Find<T>(List<T> input, int r, bool withRepetition) Parameters Type Name Description List <T> input Int32 r Boolean withRepetition Returns Type Description List < List <T>> Type Parameters Name Description T"
  },
  "api/Advanced.Algorithms.Combinatorics.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.html",
    "title": "Namespace Advanced.Algorithms.Combinatorics | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Combinatorics Classes Combination Permutation Subset"
  },
  "api/Advanced.Algorithms.Combinatorics.Permutation.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Permutation.html",
    "title": "Class Permutation | Advanced Algorithms",
    "keywords": "Class Permutation Inheritance Object Permutation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Permutation Methods Find<T>(List<T>, Int32, Boolean) Declaration public static List<List<T>> Find<T>(List<T> input, int r, bool withRepetition = false) Parameters Type Name Description List <T> input Int32 r Boolean withRepetition Returns Type Description List < List <T>> Type Parameters Name Description T"
  },
  "api/Advanced.Algorithms.Combinatorics.Subset.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Subset.html",
    "title": "Class Subset | Advanced Algorithms",
    "keywords": "Class Subset Inheritance Object Subset Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Subset Methods Find<T>(List<T>) Declaration public static List<List<T>> Find<T>(List<T> input) Parameters Type Name Description List <T> input Returns Type Description List < List <T>> Type Parameters Name Description T"
  },
  "api/Advanced.Algorithms.Compression.html": {
    "href": "api/Advanced.Algorithms.Compression.html",
    "title": "Namespace Advanced.Algorithms.Compression | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Compression Classes HuffmanCoding<T> A huffman coding implementation using Fibornacci Min Heap"
  },
  "api/Advanced.Algorithms.Compression.HuffmanCoding-1.html": {
    "href": "api/Advanced.Algorithms.Compression.HuffmanCoding-1.html",
    "title": "Class HuffmanCoding<T> | Advanced Algorithms",
    "keywords": "Class HuffmanCoding<T> A huffman coding implementation using Fibornacci Min Heap Inheritance Object HuffmanCoding<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Compression Assembly : Advanced.Algorithms.dll Syntax public class HuffmanCoding<T> Type Parameters Name Description T Methods Compress(T[]) Returns a dictionary of chosen encoding bytes for each distinct T Declaration public Dictionary<T, byte[]> Compress(T[] input) Parameters Type Name Description T[] input Returns Type Description Dictionary <T, System.Byte []>"
  },
  "api/Advanced.Algorithms.DataStructures.ArrayList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.ArrayList-1.html",
    "title": "Class ArrayList<T> | Advanced Algorithms",
    "keywords": "Class ArrayList<T> A self expanding array (dynamic array) aka array vector Inheritance Object ArrayList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class ArrayList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors ArrayList(IEnumerable<T>) Overloaded constructor Declaration public ArrayList(IEnumerable<T> initial) Parameters Type Name Description IEnumerable <T> initial ArrayList(Int32, IEnumerable<T>) Declaration public ArrayList(int initalArraySize = 2, IEnumerable<T> initial = null) Parameters Type Name Description Int32 initalArraySize IEnumerable <T> initial Properties Item[Int32] Expose indexer Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Length Declaration public int Length { get; } Property Value Type Description Int32 Methods Add(T) Declaration public void Add(T item) Parameters Type Name Description T item AddRange(T[]) Add's the given array to the end Declaration public void AddRange(T[] array) Parameters Type Name Description T[] array GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> InsertAt(Int32, T) Insert element at specified index Declaration public void InsertAt(int index, T item) Parameters Type Name Description Int32 index T item RemoveItem(Int32) Declaration public void RemoveItem(int i) Parameters Type Name Description Int32 i ToArray() Returns as an array Declaration public T[] ToArray() Returns Type Description T[] Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.ArrayListEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.ArrayListEnumerator-1.html",
    "title": "Class ArrayListEnumerator<T> | Advanced Algorithms",
    "keywords": "Class ArrayListEnumerator<T> Inheritance Object ArrayListEnumerator<T> Implements IEnumerator <T> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class ArrayListEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Constructors ArrayListEnumerator(T[], Int32) Declaration public ArrayListEnumerator(T[] list, int length) Parameters Type Name Description T[] list Int32 length Properties Current Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset() Explicit Interface Implementations IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.AVLTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.AVLTree-1.html",
    "title": "Class AVLTree<T> | Advanced Algorithms",
    "keywords": "Class AVLTree<T> Inheritance Object AVLTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class AVLTree<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Contains(T) Declaration public bool Contains(T value) Parameters Type Name Description T value Returns Type Description Boolean Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value findMax() Declaration public T findMax() Returns Type Description T FindMin() Declaration public T FindMin() Returns Type Description T GetHeight() Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.BinaryTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinaryTree-1.html",
    "title": "Class BinaryTree<T> | Advanced Algorithms",
    "keywords": "Class BinaryTree<T> A complete binary tree implementation using pointers Inheritance Object BinaryTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinaryTree<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Root Declaration public BinaryTreeNode<T> Root { get; set; } Property Value Type Description BinaryTreeNode <T> Methods Delete(T) only deletes unambiguous nodes (a node with two children cannot be deleted unambiguously) O(log(n)) worst O(n) for unbalanced tree Declaration public void Delete(T value) Parameters Type Name Description T value GetHeight() Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T, T) only inserts to unambiguous nodes (a node with two children cannot be inserted with a new child unambiguously) O(log(n)) worst O(n) for unbalanced tree Declaration public void Insert(T parentValue, T newValue) Parameters Type Name Description T parentValue T newValue"
  },
  "api/Advanced.Algorithms.DataStructures.BinaryTreeNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinaryTreeNode-1.html",
    "title": "Class BinaryTreeNode<T> | Advanced Algorithms",
    "keywords": "Class BinaryTreeNode<T> Inheritance Object BinaryTreeNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinaryTreeNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors BinaryTreeNode(BinaryTreeNode<T>, T) Declaration public BinaryTreeNode(BinaryTreeNode<T> parent, T value) Parameters Type Name Description BinaryTreeNode <T> parent T value Properties IsLeaf Declaration public bool IsLeaf { get; } Property Value Type Description Boolean Left Declaration public BinaryTreeNode<T> Left { get; set; } Property Value Type Description BinaryTreeNode <T> Parent Declaration public BinaryTreeNode<T> Parent { get; set; } Property Value Type Description BinaryTreeNode <T> Right Declaration public BinaryTreeNode<T> Right { get; set; } Property Value Type Description BinaryTreeNode <T> Value Declaration public T Value { get; set; } Property Value Type Description T Methods CompareTo(BinaryTreeNode<T>) Declaration public int CompareTo(BinaryTreeNode<T> node) Parameters Type Name Description BinaryTreeNode <T> node Returns Type Description Int32 CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.BST-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BST-1.html",
    "title": "Class BST<T> | Advanced Algorithms",
    "keywords": "Class BST<T> Inheritance Object BST<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BST<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value FindMax() Declaration public T FindMax() Returns Type Description T FindMin() Declaration public T FindMin() Returns Type Description T GetHeight() Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.CircularLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.CircularLinkedList-1.html",
    "title": "Class CircularLinkedList<T> | Advanced Algorithms",
    "keywords": "Class CircularLinkedList<T> A singly linked list implementation Inheritance Object CircularLinkedList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class CircularLinkedList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Fields ReferenceNode Declaration public CircularLinkedListNode<T> ReferenceNode Field Value Type Description CircularLinkedListNode <T> Methods Count() Declaration public int Count() Returns Type Description Int32 Delete(T) Declaration public void Delete(T data) Parameters Type Name Description T data Delete(CircularLinkedListNode<T>) Declaration public void Delete(CircularLinkedListNode<T> current) Parameters Type Name Description CircularLinkedListNode <T> current DeleteAll() Declaration public void DeleteAll() GetAllNodes() Declaration public List<T> GetAllNodes() Returns Type Description List <T> GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Insert(T) Declaration public CircularLinkedListNode<T> Insert(T data) Parameters Type Name Description T data Returns Type Description CircularLinkedListNode <T> IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.CircularLinkedListEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.CircularLinkedListEnumerator-1.html",
    "title": "Class CircularLinkedListEnumerator<T> | Advanced Algorithms",
    "keywords": "Class CircularLinkedListEnumerator<T> Inheritance Object CircularLinkedListEnumerator<T> Implements IEnumerator <T> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class CircularLinkedListEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Properties Current Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset() Explicit Interface Implementations IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.CircularLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.CircularLinkedListNode-1.html",
    "title": "Class CircularLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class CircularLinkedListNode<T> Inheritance Object CircularLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class CircularLinkedListNode<T> Type Parameters Name Description T Constructors CircularLinkedListNode(T) Declaration public CircularLinkedListNode(T data) Parameters Type Name Description T data Fields Data Declaration public T Data Field Value Type Description T Next Declaration public CircularLinkedListNode<T> Next Field Value Type Description CircularLinkedListNode <T> Prev Declaration public CircularLinkedListNode<T> Prev Field Value Type Description CircularLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.Dictionary-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Dictionary-2.html",
    "title": "Class Dictionary<TK, TV> | Advanced Algorithms",
    "keywords": "Class Dictionary<TK, TV> A hash table implementation (key value dictionary) with separate chaining TODO improve performance by using a Prime number greater than total elements as Bucket Size Inheritance Object Dictionary<TK, TV> Implements IEnumerable < DictionaryNode <TK, TV>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Dictionary<TK, TV> : IEnumerable<DictionaryNode<TK, TV>>, IEnumerable Type Parameters Name Description TK TV Constructors Dictionary(DictionaryType, Int32) Declaration public Dictionary(DictionaryType type = DictionaryType.SeparateChaining, int initialBucketSize = 2) Parameters Type Name Description DictionaryType type Int32 initialBucketSize Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[TK] Declaration public TV this[TK key] { get; set; } Parameters Type Name Description TK key Property Value Type Description TV Methods Add(TK, TV) Declaration public void Add(TK key, TV value) Parameters Type Name Description TK key TV value Clear() clear hash table Declaration public void Clear() ContainsKey(TK) Declaration public bool ContainsKey(TK key) Parameters Type Name Description TK key Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<DictionaryNode<TK, TV>> GetEnumerator() Returns Type Description IEnumerator < DictionaryNode <TK, TV>> Remove(TK) Declaration public void Remove(TK key) Parameters Type Name Description TK key Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.DictionaryNode-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DictionaryNode-2.html",
    "title": "Class DictionaryNode<TK, TV> | Advanced Algorithms",
    "keywords": "Class DictionaryNode<TK, TV> key-value set Inheritance Object DictionaryNode<TK, TV> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DictionaryNode<TK, TV> Type Parameters Name Description TK TV Constructors DictionaryNode(TK, TV) Declaration public DictionaryNode(TK key, TV value) Parameters Type Name Description TK key TV value Fields Key Declaration public TK Key Field Value Type Description TK Value Declaration public TV Value Field Value Type Description TV"
  },
  "api/Advanced.Algorithms.DataStructures.DictionaryType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DictionaryType.html",
    "title": "Enum DictionaryType | Advanced Algorithms",
    "keywords": "Enum DictionaryType Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public enum DictionaryType Fields Name Description OpenAddressing SeparateChaining"
  },
  "api/Advanced.Algorithms.DataStructures.DInterval-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DInterval-1.html",
    "title": "Class DInterval<T> | Advanced Algorithms",
    "keywords": "Class DInterval<T> An interval object to represent multi-dimensional intervals Inheritance Object DInterval<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DInterval<T> where T : IComparable Type Parameters Name Description T Constructors DInterval(T[], T[]) Declaration public DInterval(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Properties End Declaration public T[] End { get; set; } Property Value Type Description T[] Start Declaration public T[] Start { get; set; } Property Value Type Description T[]"
  },
  "api/Advanced.Algorithms.DataStructures.DIntervalTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DIntervalTree-1.html",
    "title": "Class DIntervalTree<T> | Advanced Algorithms",
    "keywords": "Class DIntervalTree<T> A multi-dimensional interval tree implementation Inheritance Object DIntervalTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DIntervalTree<T> where T : IComparable Type Parameters Name Description T Constructors DIntervalTree(Int32) Declaration public DIntervalTree(int dimensions) Parameters Type Name Description Int32 dimensions Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T[], T[]) delete this interval Declaration public void Delete(T[] start, T[] end) Parameters Type Name Description T[] start T[] end DoOverlap(T[], T[]) does this interval overlap with any interval in this interval tree? Declaration public bool DoOverlap(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description Boolean GetOverlaps(T[], T[]) returns a list of matching intervals Declaration public List<DInterval<T>> GetOverlaps(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List < DInterval <T>> Insert(T[], T[]) Add a new interval to this interval tree Declaration public void Insert(T[] start, T[] end) Parameters Type Name Description T[] start T[] end"
  },
  "api/Advanced.Algorithms.DataStructures.DistributedSystems.CircularQueue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DistributedSystems.CircularQueue-1.html",
    "title": "Class CircularQueue<T> | Advanced Algorithms",
    "keywords": "Class CircularQueue<T> Cicular queue aka Ring Buffer using fixed size array Inheritance Object CircularQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.DistributedSystems Assembly : Advanced.Algorithms.dll Syntax public class CircularQueue<T> Type Parameters Name Description T Constructors CircularQueue(Int32) Declaration public CircularQueue(int size) Parameters Type Name Description Int32 size Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Dequeue() O(1) time complexity Declaration public T Dequeue() Returns Type Description T Dequeue(Int32) O(bulkNumber) time complexity Declaration public IEnumerable<T> Dequeue(int bulkNumber) Parameters Type Name Description Int32 bulkNumber Returns Type Description IEnumerable <T> Enqueue(T) Note: When buffer overflows oldest data will be erased O(1) time complexity Declaration public T Enqueue(T data) Parameters Type Name Description T data Returns Type Description T Enqueue(T[]) O(bulk.Length) time complexity Declaration public IEnumerable<T> Enqueue(T[] bulk) Parameters Type Name Description T[] bulk Returns Type Description IEnumerable <T>"
  },
  "api/Advanced.Algorithms.DataStructures.DistributedSystems.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DistributedSystems.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.DistributedSystems | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.DistributedSystems Classes CircularQueue<T> Cicular queue aka Ring Buffer using fixed size array"
  },
  "api/Advanced.Algorithms.DataStructures.DoublyLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DoublyLinkedList-1.html",
    "title": "Class DoublyLinkedList<T> | Advanced Algorithms",
    "keywords": "Class DoublyLinkedList<T> A singly linked list implementation Inheritance Object DoublyLinkedList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DoublyLinkedList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Fields Head Declaration public DoublyLinkedListNode<T> Head Field Value Type Description DoublyLinkedListNode <T> Tail Declaration public DoublyLinkedListNode<T> Tail Field Value Type Description DoublyLinkedListNode <T> Methods Count() Declaration public int Count() Returns Type Description Int32 Delete(T) search for first T and delete Declaration public void Delete(T data) Parameters Type Name Description T data Delete(DoublyLinkedListNode<T>) deletes this given node Declaration public void Delete(DoublyLinkedListNode<T> node) Parameters Type Name Description DoublyLinkedListNode <T> node DeleteAll() Declaration public void DeleteAll() DeleteFirst() Declaration public T DeleteFirst() Returns Type Description T DeleteLast() Declaration public T DeleteLast() Returns Type Description T GetAllNodes() Declaration public List<T> GetAllNodes() Returns Type Description List <T> GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> InsertAfter(DoublyLinkedListNode<T>, DoublyLinkedListNode<T>) Insert right after this node Declaration public DoublyLinkedListNode<T> InsertAfter(DoublyLinkedListNode<T> node, DoublyLinkedListNode<T> data) Parameters Type Name Description DoublyLinkedListNode <T> node DoublyLinkedListNode <T> data Returns Type Description DoublyLinkedListNode <T> InsertBefore(DoublyLinkedListNode<T>, DoublyLinkedListNode<T>) Insert right before this node Declaration public DoublyLinkedListNode<T> InsertBefore(DoublyLinkedListNode<T> node, DoublyLinkedListNode<T> data) Parameters Type Name Description DoublyLinkedListNode <T> node DoublyLinkedListNode <T> data Returns Type Description DoublyLinkedListNode <T> InsertFirst(T) Declaration public DoublyLinkedListNode<T> InsertFirst(T data) Parameters Type Name Description T data Returns Type Description DoublyLinkedListNode <T> InsertLast(T) Declaration public DoublyLinkedListNode<T> InsertLast(T data) Parameters Type Name Description T data Returns Type Description DoublyLinkedListNode <T> IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.DoublyLinkedListEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DoublyLinkedListEnumerator-1.html",
    "title": "Class DoublyLinkedListEnumerator<T> | Advanced Algorithms",
    "keywords": "Class DoublyLinkedListEnumerator<T> Inheritance Object DoublyLinkedListEnumerator<T> Implements IEnumerator <T> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DoublyLinkedListEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Properties Current Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset() Explicit Interface Implementations IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.DoublyLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DoublyLinkedListNode-1.html",
    "title": "Class DoublyLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class DoublyLinkedListNode<T> Inheritance Object DoublyLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DoublyLinkedListNode<T> Type Parameters Name Description T Constructors DoublyLinkedListNode(T) Declaration public DoublyLinkedListNode(T data) Parameters Type Name Description T data Fields Data Declaration public T Data Field Value Type Description T Next Declaration public DoublyLinkedListNode<T> Next Field Value Type Description DoublyLinkedListNode <T> Previous Declaration public DoublyLinkedListNode<T> Previous Field Value Type Description DoublyLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.DRangeTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DRangeTree-1.html",
    "title": "Class DRangeTree<T> | Advanced Algorithms",
    "keywords": "Class DRangeTree<T> range tree Inheritance Object DRangeTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DRangeTree<T> where T : IComparable Type Parameters Name Description T Constructors DRangeTree(Int32) Declaration public DRangeTree(int dimensions) Parameters Type Name Description Int32 dimensions Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T[]) Declaration public void Delete(T[] value) Parameters Type Name Description T[] value GetInRange(T[], T[]) Get all points within given range Declaration public List<T[]> GetInRange(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List <T[]> Insert(T[]) Declaration public void Insert(T[] value) Parameters Type Name Description T[] value"
  },
  "api/Advanced.Algorithms.DataStructures.FenwickTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.FenwickTree-1.html",
    "title": "Class FenwickTree<T> | Advanced Algorithms",
    "keywords": "Class FenwickTree<T> Fenwick Tree (Binary Indexed Tree) for prefix sum Inheritance Object FenwickTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class FenwickTree<T> Type Parameters Name Description T Constructors FenwickTree(T[], Func<T, T, T>) constructs a Fenwick tree using the specified sum operation function Declaration public FenwickTree(T[] input, Func<T, T, T> sumOperation) Parameters Type Name Description T[] input Func <T, T, T> sumOperation Methods GetPrefixSum(Int32) get prefix sum from 0 till end index Declaration public T GetPrefixSum(int endIndex) Parameters Type Name Description Int32 endIndex Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraph-1.html",
    "title": "Class DiGraph<T> | Advanced Algorithms",
    "keywords": "Class DiGraph<T> A directed graph implementation Inheritance Object DiGraph<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class DiGraph<T> Type Parameters Name Description T Constructors DiGraph() Constructor Declaration public DiGraph() Properties ReferenceVertex return a reference vertex to start traversing Vertices O(1) complexity Declaration public DiGraphVertex<T> ReferenceVertex { get; } Property Value Type Description DiGraphVertex <T> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T) add an edge from source to destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest AddVertex(T) add a new vertex to this graph O(1) complexity Declaration public DiGraphVertex<T> AddVertex(T value) Parameters Type Name Description T value Returns Type Description DiGraphVertex <T> FindVertex(T) returns the vertex object with given value O(1) complexity Declaration public DiGraphVertex<T> FindVertex(T value) Parameters Type Name Description T value Returns Type Description DiGraphVertex <T> GetAllInEdges(T) Declaration public List<T> GetAllInEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> GetAllOutEdges(T) Declaration public List<T> GetAllOutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> HasEdge(T, T) do we have an edge between the given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) remove an existing vertex frm graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraphVertex-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraphVertex-1.html",
    "title": "Class DiGraphVertex<T> | Advanced Algorithms",
    "keywords": "Class DiGraphVertex<T> Graph vertex Inheritance Object DiGraphVertex<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class DiGraphVertex<T> Type Parameters Name Description T Constructors DiGraphVertex(T) Declaration public DiGraphVertex(T value) Parameters Type Name Description T value Properties InEdges Declaration public HashSet<DiGraphVertex<T>> InEdges { get; set; } Property Value Type Description HashSet < DiGraphVertex <T>> OutEdges Declaration public HashSet<DiGraphVertex<T>> OutEdges { get; set; } Property Value Type Description HashSet < DiGraphVertex <T>> Value Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.Graph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.Graph-1.html",
    "title": "Class Graph<T> | Advanced Algorithms",
    "keywords": "Class Graph<T> A graph implementation Inheritance Object Graph<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class Graph<T> Type Parameters Name Description T Constructors Graph() Constructor Declaration public Graph() Properties ReferenceVertex return a reference vertex to start traversing Vertices O(1) complexity Declaration public GraphVertex<T> ReferenceVertex { get; } Property Value Type Description GraphVertex <T> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T) add and edge to this graph O(1) complexity Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest AddVertex(T) add a new vertex to this graph O(1) complexity Declaration public GraphVertex<T> AddVertex(T value) Parameters Type Name Description T value Returns Type Description GraphVertex <T> FindVertex(T) returns the vertex object with given value O(1) complexity Declaration public GraphVertex<T> FindVertex(T value) Parameters Type Name Description T value Returns Type Description GraphVertex <T> GetAllEdges(T) Declaration public List<T> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> HasEdge(T, T) do we have an edge between given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) remove an edge from this graph O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) remove an existing vertex from this graph O(V) complexity Declaration public void RemoveVertex(T vertex) Parameters Type Name Description T vertex"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.GraphVertex-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.GraphVertex-1.html",
    "title": "Class GraphVertex<T> | Advanced Algorithms",
    "keywords": "Class GraphVertex<T> A graph vertex Inheritance Object GraphVertex<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class GraphVertex<T> Type Parameters Name Description T Constructors GraphVertex(T) Declaration public GraphVertex(T value) Parameters Type Name Description T value Properties Edges Declaration public HashSet<GraphVertex<T>> Edges { get; set; } Property Value Type Description HashSet < GraphVertex <T>> Value Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyList | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyList Classes DiGraph<T> A directed graph implementation DiGraphVertex<T> Graph vertex Graph<T> A graph implementation GraphVertex<T> A graph vertex WeightedDiGraph<T, TW> A weighted graph implementation WeightedDiGraphVertex<T, TW> A weighted graph vertex WeightedGraph<T, TW> A weighted graph implementation WeightedGraphVertex<T, TW> A weighted graph vertex"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraph-2.html",
    "title": "Class WeightedDiGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedDiGraph<T, TW> A weighted graph implementation Inheritance Object WeightedDiGraph<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedDiGraph<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors WeightedDiGraph() Constructor Declaration public WeightedDiGraph() Properties ReferenceVertex return a reference vertex to start traversing Vertices O(1) complexity Declaration public WeightedDiGraphVertex<T, TW> ReferenceVertex { get; } Property Value Type Description WeightedDiGraphVertex <T, TW> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T, TW) Add a new edge to this graph O(1) complexity Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight AddVertex(T) Add a new vertex to this graph O(1) complexity Declaration public WeightedDiGraphVertex<T, TW> AddVertex(T value) Parameters Type Name Description T value Returns Type Description WeightedDiGraphVertex <T, TW> FindVertex(T) returns the vertex with given value O(1) complexity Declaration public WeightedDiGraphVertex<T, TW> FindVertex(T value) Parameters Type Name Description T value Returns Type Description WeightedDiGraphVertex <T, TW> GetAllInEdges(T) Declaration public List<Tuple<T, TW>> GetAllInEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> GetAllOutEdges(T) Declaration public List<Tuple<T, TW>> GetAllOutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> HasEdge(T, T) do we have an edge between given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) remove the given edge from this graph O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) remove the given vertex O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraphVertex-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraphVertex-2.html",
    "title": "Class WeightedDiGraphVertex<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedDiGraphVertex<T, TW> A weighted graph vertex Inheritance Object WeightedDiGraphVertex<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedDiGraphVertex<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors WeightedDiGraphVertex(T) Declaration public WeightedDiGraphVertex(T value) Parameters Type Name Description T value Properties InEdges Declaration public Dictionary<WeightedDiGraphVertex<T, TW>, TW> InEdges { get; set; } Property Value Type Description Dictionary < WeightedDiGraphVertex <T, TW>, TW> OutEdges Declaration public Dictionary<WeightedDiGraphVertex<T, TW>, TW> OutEdges { get; set; } Property Value Type Description Dictionary < WeightedDiGraphVertex <T, TW>, TW> Value Declaration public T Value { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraph-2.html",
    "title": "Class WeightedGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedGraph<T, TW> A weighted graph implementation Inheritance Object WeightedGraph<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedGraph<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors WeightedGraph() Constructor Declaration public WeightedGraph() Properties ReferenceVertex return a reference vertex to start traversing Vertices O(1) complexity Declaration public WeightedGraphVertex<T, TW> ReferenceVertex { get; } Property Value Type Description WeightedGraphVertex <T, TW> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T, TW) Add a new edge to this graph with given weight and between given source and destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight AddVertex(T) Add a new vertex to this graph O(1) complexity Declaration public WeightedGraphVertex<T, TW> AddVertex(T value) Parameters Type Name Description T value Returns Type Description WeightedGraphVertex <T, TW> FindVertex(T) Find the Vertex with given value O(1) complexity Declaration public WeightedGraphVertex<T, TW> FindVertex(T value) Parameters Type Name Description T value Returns Type Description WeightedGraphVertex <T, TW> GetAllEdges(T) Declaration public List<Tuple<T, TW>> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> HasEdge(T, T) Do we have an edge between given source and destination O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Remove given edge O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) remove given vertex from this graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraphVertex-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraphVertex-2.html",
    "title": "Class WeightedGraphVertex<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedGraphVertex<T, TW> A weighted graph vertex Inheritance Object WeightedGraphVertex<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedGraphVertex<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors WeightedGraphVertex(T) Declaration public WeightedGraphVertex(T value) Parameters Type Name Description T value Properties Edges Declaration public Dictionary<WeightedGraphVertex<T, TW>, TW> Edges { get; set; } Property Value Type Description Dictionary < WeightedGraphVertex <T, TW>, TW> Value Declaration public T Value { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.DiGraph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.DiGraph-1.html",
    "title": "Class DiGraph<T> | Advanced Algorithms",
    "keywords": "Class DiGraph<T> A directed graph implementation using dynamically growinng/shrinking adjacency matrix array Inheritance Object DiGraph<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class DiGraph<T> Type Parameters Name Description T Constructors DiGraph() Declaration public DiGraph() Properties VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T) add an edge from source to destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest AddVertex(T) add a new vertex to this graph O(1) complexity Declaration public void AddVertex(T value) Parameters Type Name Description T value GetAllInEdges(T) Declaration public List<T> GetAllInEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> GetAllOutEdges(T) Declaration public List<T> GetAllOutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> HasEdge(T, T) do we have an edge between the given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) remove an existing vertex from graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.Graph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.Graph-1.html",
    "title": "Class Graph<T> | Advanced Algorithms",
    "keywords": "Class Graph<T> A directed graph implementation using dynamically growinng/shrinking adjacency matrix array Inheritance Object Graph<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class Graph<T> Type Parameters Name Description T Constructors Graph() Declaration public Graph() Properties VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T) add an edge from source to destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest AddVertex(T) add a new vertex to this graph O(1) complexity Declaration public void AddVertex(T value) Parameters Type Name Description T value GetAllEdges(T) Declaration public List<T> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> HasEdge(T, T) do we have an edge between the given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) remove an existing vertex from graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Classes DiGraph<T> A directed graph implementation using dynamically growinng/shrinking adjacency matrix array Graph<T> A directed graph implementation using dynamically growinng/shrinking adjacency matrix array WeightedDiGraph<T, TW> A weighted graph implementation using dynamically growinng/shrinking adjacency matrix array WeightedGraph<T, TW> A weighted graph implementation using dynamically growinng/shrinking adjacency matrix array"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedDiGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedDiGraph-2.html",
    "title": "Class WeightedDiGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedDiGraph<T, TW> A weighted graph implementation using dynamically growinng/shrinking adjacency matrix array Inheritance Object WeightedDiGraph<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class WeightedDiGraph<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors WeightedDiGraph() Constructor Declaration public WeightedDiGraph() Properties VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T, TW) Add a new edge to this graph O(1) complexity Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight AddVertex(T) Add a new vertex to this graph O(1) complexity Declaration public void AddVertex(T value) Parameters Type Name Description T value GetAllInEdges(T) Declaration public List<Tuple<T, TW>> GetAllInEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> GetAllOutEdges(T) Declaration public List<Tuple<T, TW>> GetAllOutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> HasEdge(T, T) do we have an edge between given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) remove the given edge from this graph O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) remove the given vertex O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedGraph-2.html",
    "title": "Class WeightedGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedGraph<T, TW> A weighted graph implementation using dynamically growinng/shrinking adjacency matrix array Inheritance Object WeightedGraph<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class WeightedGraph<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors WeightedGraph() Constructor Declaration public WeightedGraph() Properties VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T, TW) Add a new edge to this graph with given weight and between given source and destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight AddVertex(T) Add a new vertex to this graph O(1) complexity Declaration public void AddVertex(T value) Parameters Type Name Description T value GetAllEdges(T) Declaration public List<Tuple<T, TW>> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> HasEdge(T, T) Do we have an edge between given source and destination O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Remove given edge O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) remove given vertex from this graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.HashSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.HashSet-1.html",
    "title": "Class HashSet<TV> | Advanced Algorithms",
    "keywords": "Class HashSet<TV> A hash table implementation (key value HashSet) with separate chaining TODO improve performance by using a Prime number greater than total elements as Bucket Size Inheritance Object HashSet<TV> Implements IEnumerable < HashSetNode <TV>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class HashSet<TV> : IEnumerable<HashSetNode<TV>>, IEnumerable Type Parameters Name Description TV Constructors HashSet(HashSetType, Int32) Declaration public HashSet(HashSetType type = HashSetType.SeparateChaining, int initialBucketSize = 2) Parameters Type Name Description HashSetType type Int32 initialBucketSize Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(TV) Declaration public void Add(TV value) Parameters Type Name Description TV value Clear() clear hash table Declaration public void Clear() Contains(TV) Declaration public bool Contains(TV value) Parameters Type Name Description TV value Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<HashSetNode<TV>> GetEnumerator() Returns Type Description IEnumerator < HashSetNode <TV>> Remove(TV) Declaration public void Remove(TV value) Parameters Type Name Description TV value Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.HashSetNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.HashSetNode-1.html",
    "title": "Class HashSetNode<TV> | Advanced Algorithms",
    "keywords": "Class HashSetNode<TV> key-value set Inheritance Object HashSetNode<TV> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class HashSetNode<TV> Type Parameters Name Description TV Constructors HashSetNode(TV) Declaration public HashSetNode(TV value) Parameters Type Name Description TV value Fields Value Declaration public TV Value Field Value Type Description TV"
  },
  "api/Advanced.Algorithms.DataStructures.HashSetType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.HashSetType.html",
    "title": "Enum HashSetType | Advanced Algorithms",
    "keywords": "Enum HashSetType Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public enum HashSetType Fields Name Description OpenAddressing SeparateChaining"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.BinomialHeapNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.BinomialHeapNode-1.html",
    "title": "Class BinomialHeapNode<T> | Advanced Algorithms",
    "keywords": "Class BinomialHeapNode<T> Inheritance Object BinomialHeapNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap Assembly : Advanced.Algorithms.dll Syntax public class BinomialHeapNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors BinomialHeapNode(T) Declaration public BinomialHeapNode(T value) Parameters Type Name Description T value Methods CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.FibornacciHeapNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.FibornacciHeapNode-1.html",
    "title": "Class FibornacciHeapNode<T> | Advanced Algorithms",
    "keywords": "Class FibornacciHeapNode<T> Inheritance Object FibornacciHeapNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap Assembly : Advanced.Algorithms.dll Syntax public class FibornacciHeapNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors FibornacciHeapNode(T) Declaration public FibornacciHeapNode(T value) Parameters Type Name Description T value Methods CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Heap | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Heap Classes BinomialHeapNode<T> FibornacciHeapNode<T> PairingHeapNode<T>"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Max.BinomialMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Max.BinomialMaxHeap-1.html",
    "title": "Class BinomialMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class BinomialMaxHeap<T> Inheritance Object BinomialMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Max Assembly : Advanced.Algorithms.dll Syntax public class BinomialMaxHeap<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods ExtractMax() O(log(n)) complexity Declaration public T ExtractMax() Returns Type Description T IncrementKey(BinomialHeapNode<T>) Update the Heap with new value for this node pointer O(log(n)) complexity Declaration public void IncrementKey(BinomialHeapNode<T> node) Parameters Type Name Description BinomialHeapNode <T> node Insert(T) O(log(n)) complexity Declaration public BinomialHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description BinomialHeapNode <T> PeekMax() O(log(n)) complexity Declaration public T PeekMax() Returns Type Description T Union(BinomialMaxHeap<T>) Unions this heap with another O(log(n)) complexity Declaration public void Union(BinomialMaxHeap<T> binomialHeap) Parameters Type Name Description BinomialMaxHeap <T> binomialHeap"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Max.BMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Max.BMaxHeap-1.html",
    "title": "Class BMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class BMaxHeap<T> Inheritance Object BMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Max Assembly : Advanced.Algorithms.dll Syntax public class BMaxHeap<T> where T : IComparable Type Parameters Name Description T Constructors BMaxHeap(IEnumerable<T>) Initialize with optional init value Declaration public BMaxHeap(IEnumerable<T> initial = null) Parameters Type Name Description IEnumerable <T> initial Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods ExtractMax() Declaration public T ExtractMax() Returns Type Description T Insert(T) Declaration public void Insert(T newItem) Parameters Type Name Description T newItem PeekMax() Declaration public T PeekMax() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Max.D_aryMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Max.D_aryMaxHeap-1.html",
    "title": "Class D_aryMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class D_aryMaxHeap<T> Inheritance Object D_aryMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Max Assembly : Advanced.Algorithms.dll Syntax public class D_aryMaxHeap<T> where T : IComparable Type Parameters Name Description T Constructors D_aryMaxHeap(Int32, IEnumerable<T>) Declaration public D_aryMaxHeap(int k, IEnumerable<T> initial = null) Parameters Type Name Description Int32 k IEnumerable <T> initial Fields Count Declaration public int Count Field Value Type Description Int32 Methods ExtractMax() Declaration public T ExtractMax() Returns Type Description T Insert(T) Declaration public void Insert(T newItem) Parameters Type Name Description T newItem PeekMax() Declaration public T PeekMax() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Max.FibornacciMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Max.FibornacciMaxHeap-1.html",
    "title": "Class FibornacciMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class FibornacciMaxHeap<T> Inheritance Object FibornacciMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Max Assembly : Advanced.Algorithms.dll Syntax public class FibornacciMaxHeap<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods ExtractMax() O(log(n)) complexity Declaration public T ExtractMax() Returns Type Description T IncrementKey(FibornacciHeapNode<T>) Update the Heap with new value for this node pointer O(1) complexity amortized Declaration public void IncrementKey(FibornacciHeapNode<T> node) Parameters Type Name Description FibornacciHeapNode <T> node Insert(T) O(1) complexity amortized Declaration public FibornacciHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description FibornacciHeapNode <T> PeekMax() Declaration public T PeekMax() Returns Type Description T Union(FibornacciMaxHeap<T>) Unions this heap with another O(k) complexity where K is the FibornacciHeap Forest Length Declaration public void Union(FibornacciMaxHeap<T> fibornacciHeap) Parameters Type Name Description FibornacciMaxHeap <T> fibornacciHeap"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Max.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Max.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Heap.Max | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Heap.Max Classes BinomialMaxHeap<T> BMaxHeap<T> D_aryMaxHeap<T> FibornacciMaxHeap<T> PairingMaxHeap<T>"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Max.PairingMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Max.PairingMaxHeap-1.html",
    "title": "Class PairingMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class PairingMaxHeap<T> Inheritance Object PairingMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Max Assembly : Advanced.Algorithms.dll Syntax public class PairingMaxHeap<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods ExtractMax() Returns the max Declaration public T ExtractMax() Returns Type Description T IncrementKey(PairingHeapNode<T>) Update heap after a node value was incremented Declaration public void IncrementKey(PairingHeapNode<T> node) Parameters Type Name Description PairingHeapNode <T> node Insert(T) Insert a new Node Declaration public PairingHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description PairingHeapNode <T> Merge(PairingMaxHeap<T>) Merge another heap with this heap Declaration public void Merge(PairingMaxHeap<T> pairingHeap) Parameters Type Name Description PairingMaxHeap <T> pairingHeap PeekMax() O(1) time complexity Declaration public T PeekMax() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Min.BinomialMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Min.BinomialMinHeap-1.html",
    "title": "Class BinomialMinHeap<T> | Advanced Algorithms",
    "keywords": "Class BinomialMinHeap<T> Inheritance Object BinomialMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Min Assembly : Advanced.Algorithms.dll Syntax public class BinomialMinHeap<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods DecrementKey(BinomialHeapNode<T>) Update the Heap with new value for this node pointer O(log(n)) complexity Declaration public void DecrementKey(BinomialHeapNode<T> node) Parameters Type Name Description BinomialHeapNode <T> node ExtractMin() O(log(n)) complexity Declaration public T ExtractMin() Returns Type Description T Insert(T) O(log(n)) complexity Declaration public BinomialHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description BinomialHeapNode <T> PeekMin() O(log(n)) complexity Declaration public T PeekMin() Returns Type Description T Union(BinomialMinHeap<T>) Unions this heap with another O(log(n)) complexity Declaration public void Union(BinomialMinHeap<T> binomialHeap) Parameters Type Name Description BinomialMinHeap <T> binomialHeap"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Min.BMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Min.BMinHeap-1.html",
    "title": "Class BMinHeap<T> | Advanced Algorithms",
    "keywords": "Class BMinHeap<T> Inheritance Object BMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Min Assembly : Advanced.Algorithms.dll Syntax public class BMinHeap<T> where T : IComparable Type Parameters Name Description T Constructors BMinHeap(IEnumerable<T>) Initialize with optional init value Declaration public BMinHeap(IEnumerable<T> initial = null) Parameters Type Name Description IEnumerable <T> initial Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods ExtractMin() Declaration public T ExtractMin() Returns Type Description T Insert(T) Declaration public void Insert(T newItem) Parameters Type Name Description T newItem PeekMin() Declaration public T PeekMin() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Min.D_aryMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Min.D_aryMinHeap-1.html",
    "title": "Class D_aryMinHeap<T> | Advanced Algorithms",
    "keywords": "Class D_aryMinHeap<T> Inheritance Object D_aryMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Min Assembly : Advanced.Algorithms.dll Syntax public class D_aryMinHeap<T> where T : IComparable Type Parameters Name Description T Constructors D_aryMinHeap(Int32, IEnumerable<T>) Declaration public D_aryMinHeap(int k, IEnumerable<T> initial = null) Parameters Type Name Description Int32 k IEnumerable <T> initial Fields Count Declaration public int Count Field Value Type Description Int32 Methods ExtractMin() Declaration public T ExtractMin() Returns Type Description T Insert(T) Declaration public void Insert(T newItem) Parameters Type Name Description T newItem PeekMin() Declaration public T PeekMin() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Min.FibornacciMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Min.FibornacciMinHeap-1.html",
    "title": "Class FibornacciMinHeap<T> | Advanced Algorithms",
    "keywords": "Class FibornacciMinHeap<T> Inheritance Object FibornacciMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Min Assembly : Advanced.Algorithms.dll Syntax public class FibornacciMinHeap<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods DecrementKey(FibornacciHeapNode<T>) Update the Heap with new value for this node pointer O(1) complexity amortized Declaration public void DecrementKey(FibornacciHeapNode<T> node) Parameters Type Name Description FibornacciHeapNode <T> node ExtractMin() O(log(n)) complexity Declaration public T ExtractMin() Returns Type Description T Insert(T) O(1) complexity amortized Declaration public FibornacciHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description FibornacciHeapNode <T> PeekMin() Declaration public T PeekMin() Returns Type Description T Union(FibornacciMinHeap<T>) Unions this heap with another O(k) complexity where K is the FibornacciHeap Forest Length Declaration public void Union(FibornacciMinHeap<T> FibornacciHeap) Parameters Type Name Description FibornacciMinHeap <T> FibornacciHeap"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Min.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Min.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Heap.Min | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Heap.Min Classes BinomialMinHeap<T> BMinHeap<T> D_aryMinHeap<T> FibornacciMinHeap<T> PairingMinHeap<T>"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.Min.PairingMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.Min.PairingMinHeap-1.html",
    "title": "Class PairingMinHeap<T> | Advanced Algorithms",
    "keywords": "Class PairingMinHeap<T> Inheritance Object PairingMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap.Min Assembly : Advanced.Algorithms.dll Syntax public class PairingMinHeap<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods DecrementKey(PairingHeapNode<T>) Update heap after a node value was decremented Declaration public void DecrementKey(PairingHeapNode<T> node) Parameters Type Name Description PairingHeapNode <T> node ExtractMin() Returns the min Declaration public T ExtractMin() Returns Type Description T Insert(T) Insert a new Node Declaration public PairingHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description PairingHeapNode <T> Merge(PairingMinHeap<T>) Merge another heap with this heap Declaration public void Merge(PairingMinHeap<T> PairingHeap) Parameters Type Name Description PairingMinHeap <T> PairingHeap PeekMin() O(1) time complexity Declaration public T PeekMin() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Heap.PairingHeapNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Heap.PairingHeapNode-1.html",
    "title": "Class PairingHeapNode<T> | Advanced Algorithms",
    "keywords": "Class PairingHeapNode<T> Inheritance Object PairingHeapNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Heap Assembly : Advanced.Algorithms.dll Syntax public class PairingHeapNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors PairingHeapNode(T) Declaration public PairingHeapNode(T value) Parameters Type Name Description T value Methods CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.html": {
    "href": "api/Advanced.Algorithms.DataStructures.html",
    "title": "Namespace Advanced.Algorithms.DataStructures | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures Classes ArrayList<T> A self expanding array (dynamic array) aka array vector ArrayListEnumerator<T> AVLTree<T> BinaryTree<T> A complete binary tree implementation using pointers BinaryTreeNode<T> BST<T> CircularLinkedList<T> A singly linked list implementation CircularLinkedListEnumerator<T> CircularLinkedListNode<T> Dictionary<TK, TV> A hash table implementation (key value dictionary) with separate chaining TODO improve performance by using a Prime number greater than total elements as Bucket Size DictionaryNode<TK, TV> key-value set DInterval<T> An interval object to represent multi-dimensional intervals DIntervalTree<T> A multi-dimensional interval tree implementation DoublyLinkedList<T> A singly linked list implementation DoublyLinkedListEnumerator<T> DoublyLinkedListNode<T> DRangeTree<T> range tree FenwickTree<T> Fenwick Tree (Binary Indexed Tree) for prefix sum HashSet<TV> A hash table implementation (key value HashSet) with separate chaining TODO improve performance by using a Prime number greater than total elements as Bucket Size HashSetNode<TV> key-value set KDTree<T> A multiDimensional Kd tree implementation (Unbalanced) OpenAddressDictionaryEnumerator<TK, TV> OpenAddressHashSetEnumerator<V> RedBlackTree<T> Red black tree implementation SegmentTree<T> SeparateChainingDictionaryEnumerator<TK, TV> SeparateChainingHashSetEnumerator<TV> SinglyLinkedList<T> A singly linked list implementation SinglyLinkedListNode<T> SkipList<T> SplayTree<T> Stack<T> SuffixTree<T> A simple suffix tree implementation using a trie TernarySearchTree<T> TreapTree<T> Tree<T> TreeDictionary<TK, TV> A Dictionary implementation using balanced binary search tree (log(n) operations in worst case) This may be better than regular Dictionary implementation which can give o(K) in worst case (but O(1) when collisions K is avoided ) TreeDictionaryNode<TK, TV> TreeHashSet<V> A HashSet implementation using balanced binary search tree (log(n) operations in worst case) This may be better than regular HashSet implementation which can give o(K) in worst case (but O(1) when collisions K is avoided ) TreeNode<T> Trie<T> Interfaces IDistanceCalculator<T> A concrete implementation of this interface is required when calling GetNearestNeigbour Enums DictionaryType HashSetType StackType"
  },
  "api/Advanced.Algorithms.DataStructures.IDistanceCalculator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.IDistanceCalculator-1.html",
    "title": "Interface IDistanceCalculator<T> | Advanced Algorithms",
    "keywords": "Interface IDistanceCalculator<T> A concrete implementation of this interface is required when calling GetNearestNeigbour Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public interface IDistanceCalculator<T> where T : IComparable Type Parameters Name Description T Methods Compare(T, T, T[], T[]) Compare distance between point a to b and eucledian distance betwen point start to end Declaration int Compare(T a, T b, T[] start, T[] end) Parameters Type Name Description T a T b T[] start T[] end Returns Type Description Int32 similar result as IComparable Compare(T[], T[], T[]) Compare eucledian distance between point a to point and point b to point Declaration int Compare(T[] a, T[] b, T[] point) Parameters Type Name Description T[] a T[] b T[] point Returns Type Description Int32 similar result as IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.KDTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.KDTree-1.html",
    "title": "Class KDTree<T> | Advanced Algorithms",
    "keywords": "Class KDTree<T> A multiDimensional Kd tree implementation (Unbalanced) Inheritance Object KDTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class KDTree<T> where T : IComparable Type Parameters Name Description T Constructors KDTree(Int32) Declaration public KDTree(int dimensions) Parameters Type Name Description Int32 dimensions Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T[]) delete point Declaration public void Delete(T[] point) Parameters Type Name Description T[] point FindNearestNeighbour(IDistanceCalculator<T>, T[]) returns the nearest neigbour to point Declaration public T[] FindNearestNeighbour(IDistanceCalculator<T> distanceCalculator, T[] point) Parameters Type Name Description IDistanceCalculator <T> distanceCalculator T[] point Returns Type Description T[] GetInRange(T[], T[]) returns a list of nodes that are withing the given area start and end ranges Declaration public List<T[]> GetInRange(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List <T[]> Insert(T[]) Inserts a new item to this Kd tree Declaration public void Insert(T[] point) Parameters Type Name Description T[] point"
  },
  "api/Advanced.Algorithms.DataStructures.OpenAddressDictionaryEnumerator-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.OpenAddressDictionaryEnumerator-2.html",
    "title": "Class OpenAddressDictionaryEnumerator<TK, TV> | Advanced Algorithms",
    "keywords": "Class OpenAddressDictionaryEnumerator<TK, TV> Inheritance Object OpenAddressDictionaryEnumerator<TK, TV> Implements IEnumerator < DictionaryNode <TK, TV>> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class OpenAddressDictionaryEnumerator<TK, TV> : IEnumerator<DictionaryNode<TK, TV>>, IDisposable, IEnumerator Type Parameters Name Description TK TV Constructors OpenAddressDictionaryEnumerator(DictionaryNode<TK, TV>[], Int32) Declaration public OpenAddressDictionaryEnumerator(DictionaryNode<TK, TV>[] hashArray, int length) Parameters Type Name Description DictionaryNode <TK, TV>[] hashArray Int32 length Properties Current Declaration public DictionaryNode<TK, TV> Current { get; } Property Value Type Description DictionaryNode <TK, TV> Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset() Explicit Interface Implementations IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.OpenAddressHashSetEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.OpenAddressHashSetEnumerator-1.html",
    "title": "Class OpenAddressHashSetEnumerator<V> | Advanced Algorithms",
    "keywords": "Class OpenAddressHashSetEnumerator<V> Inheritance Object OpenAddressHashSetEnumerator<V> Implements IEnumerator < HashSetNode <V>> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class OpenAddressHashSetEnumerator<V> : IEnumerator<HashSetNode<V>>, IDisposable, IEnumerator Type Parameters Name Description V Constructors OpenAddressHashSetEnumerator(HashSetNode<V>[], Int32) Declaration public OpenAddressHashSetEnumerator(HashSetNode<V>[] hashArray, int length) Parameters Type Name Description HashSetNode <V>[] hashArray Int32 length Properties Current Declaration public HashSetNode<V> Current { get; } Property Value Type Description HashSetNode <V> Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset() Explicit Interface Implementations IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.Queues.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Queues.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Queues | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Queues Classes Queue<T> Enums QueueType"
  },
  "api/Advanced.Algorithms.DataStructures.Queues.PriorityQueue.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Queues.PriorityQueue.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Queues.PriorityQueue | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Queues.PriorityQueue Classes MaxPriorityQueue<T> MinPriorityQueue<T>"
  },
  "api/Advanced.Algorithms.DataStructures.Queues.PriorityQueue.MaxPriorityQueue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Queues.PriorityQueue.MaxPriorityQueue-1.html",
    "title": "Class MaxPriorityQueue<T> | Advanced Algorithms",
    "keywords": "Class MaxPriorityQueue<T> Inheritance Object MaxPriorityQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Queues.PriorityQueue Assembly : Advanced.Algorithms.dll Syntax public class MaxPriorityQueue<T> where T : IComparable Type Parameters Name Description T Methods Dequeue() Declaration public T Dequeue() Returns Type Description T Enqueue(T) Declaration public void Enqueue(T queueItem) Parameters Type Name Description T queueItem"
  },
  "api/Advanced.Algorithms.DataStructures.Queues.PriorityQueue.MinPriorityQueue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Queues.PriorityQueue.MinPriorityQueue-1.html",
    "title": "Class MinPriorityQueue<T> | Advanced Algorithms",
    "keywords": "Class MinPriorityQueue<T> Inheritance Object MinPriorityQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Queues.PriorityQueue Assembly : Advanced.Algorithms.dll Syntax public class MinPriorityQueue<T> where T : IComparable Type Parameters Name Description T Methods Dequeue() Declaration public T Dequeue() Returns Type Description T Enqueue(T) Declaration public void Enqueue(T queueItem) Parameters Type Name Description T queueItem"
  },
  "api/Advanced.Algorithms.DataStructures.Queues.Queue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Queues.Queue-1.html",
    "title": "Class Queue<T> | Advanced Algorithms",
    "keywords": "Class Queue<T> Inheritance Object Queue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Queues Assembly : Advanced.Algorithms.dll Syntax public class Queue<T> Type Parameters Name Description T Constructors Queue(QueueType) Declaration public Queue(QueueType type = QueueType.Array) Parameters Type Name Description QueueType type Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Dequeue() Declaration public T Dequeue() Returns Type Description T Enqueue(T) Declaration public void Enqueue(T item) Parameters Type Name Description T item"
  },
  "api/Advanced.Algorithms.DataStructures.Queues.QueueType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Queues.QueueType.html",
    "title": "Enum QueueType | Advanced Algorithms",
    "keywords": "Enum QueueType Namespace : Advanced.Algorithms.DataStructures.Queues Assembly : Advanced.Algorithms.dll Syntax public enum QueueType Fields Name Description Array LinkedList"
  },
  "api/Advanced.Algorithms.DataStructures.RedBlackTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.RedBlackTree-1.html",
    "title": "Class RedBlackTree<T> | Advanced Algorithms",
    "keywords": "Class RedBlackTree<T> Red black tree implementation Inheritance Object RedBlackTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class RedBlackTree<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value FindMax() Declaration public T FindMax() Returns Type Description T FindMin() Declaration public T FindMin() Returns Type Description T GetHeight() Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.SegmentTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SegmentTree-1.html",
    "title": "Class SegmentTree<T> | Advanced Algorithms",
    "keywords": "Class SegmentTree<T> Inheritance Object SegmentTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SegmentTree<T> Type Parameters Name Description T Constructors SegmentTree(T[], Func<T, T, T>, Func<T>) constructs a segment tree using the specified operation function Operation function is the criteria for range queries For example operation function can return Max, Min or Sum of the two input elements Default value is a void value that will eliminate a node during operation comparisons For example if operation return min value default value will be largest value (int.Max for if T is int) or default value will be 0 if operation is sum Declaration public SegmentTree(T[] input, Func<T, T, T> operation, Func<T> defaultValue) Parameters Type Name Description T[] input Func <T, T, T> operation Func <T> defaultValue Methods GetRangeResult(Int32, Int32) Declaration public T GetRangeResult(int startIndex, int endIndex) Parameters Type Name Description Int32 startIndex Int32 endIndex Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.SeparateChainingDictionaryEnumerator-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SeparateChainingDictionaryEnumerator-2.html",
    "title": "Class SeparateChainingDictionaryEnumerator<TK, TV> | Advanced Algorithms",
    "keywords": "Class SeparateChainingDictionaryEnumerator<TK, TV> Inheritance Object SeparateChainingDictionaryEnumerator<TK, TV> Implements IEnumerator < DictionaryNode <TK, TV>> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SeparateChainingDictionaryEnumerator<TK, TV> : IEnumerator<DictionaryNode<TK, TV>>, IDisposable, IEnumerator Type Parameters Name Description TK TV Properties Current Declaration public DictionaryNode<TK, TV> Current { get; } Property Value Type Description DictionaryNode <TK, TV> Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset() Explicit Interface Implementations IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.SeparateChainingHashSetEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SeparateChainingHashSetEnumerator-1.html",
    "title": "Class SeparateChainingHashSetEnumerator<TV> | Advanced Algorithms",
    "keywords": "Class SeparateChainingHashSetEnumerator<TV> Inheritance Object SeparateChainingHashSetEnumerator<TV> Implements IEnumerator < HashSetNode <TV>> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SeparateChainingHashSetEnumerator<TV> : IEnumerator<HashSetNode<TV>>, IDisposable, IEnumerator Type Parameters Name Description TV Properties Current Declaration public HashSetNode<TV> Current { get; } Property Value Type Description HashSetNode <TV> Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset() Explicit Interface Implementations IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.Set.BloomFilter-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Set.BloomFilter-1.html",
    "title": "Class BloomFilter<T> | Advanced Algorithms",
    "keywords": "Class BloomFilter<T> A simple bloom filter implementation in C# A probabilistic data structure as an alternative to HashSet Keeps track of given keys and returns answer to key exists query with very low probability of error Inheritance Object BloomFilter<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Set Assembly : Advanced.Algorithms.dll Syntax public class BloomFilter<T> Type Parameters Name Description T Constructors BloomFilter(Int32) Higher the size lower the collision and failure probablity Declaration public BloomFilter(int size) Parameters Type Name Description Int32 size Methods AddKey(T) Run time complexity is O(1) Declaration public void AddKey(T key) Parameters Type Name Description T key KeyExists(T) Run time complexity is O(1) Declaration public bool KeyExists(T key) Parameters Type Name Description T key Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.DataStructures.Set.DisJointSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Set.DisJointSet-1.html",
    "title": "Class DisJointSet<T> | Advanced Algorithms",
    "keywords": "Class DisJointSet<T> A disjoint set implementation Inheritance Object DisJointSet<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Set Assembly : Advanced.Algorithms.dll Syntax public class DisJointSet<T> Type Parameters Name Description T Methods FindSet(T) Returns the reference member of the set where this member is part of Declaration public T FindSet(T member) Parameters Type Name Description T member Returns Type Description T MakeSet(T) Creates a new set with given member Declaration public void MakeSet(T member) Parameters Type Name Description T member Union(T, T) Union's their sets if given members are in differant sets Otherwise do nothing Declaration public void Union(T memberA, T memberB) Parameters Type Name Description T memberA T memberB"
  },
  "api/Advanced.Algorithms.DataStructures.Set.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Set.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Set | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Set Classes BloomFilter<T> A simple bloom filter implementation in C# A probabilistic data structure as an alternative to HashSet Keeps track of given keys and returns answer to key exists query with very low probability of error DisJointSet<T> A disjoint set implementation SparseSet"
  },
  "api/Advanced.Algorithms.DataStructures.Set.SparseSet.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Set.SparseSet.html",
    "title": "Class SparseSet | Advanced Algorithms",
    "keywords": "Class SparseSet Inheritance Object SparseSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Set Assembly : Advanced.Algorithms.dll Syntax public class SparseSet Constructors SparseSet(Int32, Int32) Declaration public SparseSet(int maxVal, int capacity) Parameters Type Name Description Int32 maxVal Int32 capacity Properties Length Declaration public int Length { get; } Property Value Type Description Int32 Methods Add(Int32) Declaration public void Add(int value) Parameters Type Name Description Int32 value Clear() Declaration public void Clear() HasItem(Int32) Declaration public bool HasItem(int value) Parameters Type Name Description Int32 value Returns Type Description Boolean Remove(Int32) Declaration public void Remove(int value) Parameters Type Name Description Int32 value"
  },
  "api/Advanced.Algorithms.DataStructures.SinglyLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SinglyLinkedList-1.html",
    "title": "Class SinglyLinkedList<T> | Advanced Algorithms",
    "keywords": "Class SinglyLinkedList<T> A singly linked list implementation Inheritance Object SinglyLinkedList<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SinglyLinkedList<T> Type Parameters Name Description T Fields Head Declaration public SinglyLinkedListNode<T> Head Field Value Type Description SinglyLinkedListNode <T> Methods Count() Declaration public int Count() Returns Type Description Int32 Delete(T) Declaration public void Delete(T data) Parameters Type Name Description T data DeleteAll() Declaration public void DeleteAll() DeleteFirst() Declaration public T DeleteFirst() Returns Type Description T DeleteLast() Declaration public T DeleteLast() Returns Type Description T GetAllNodes() Declaration public List<T> GetAllNodes() Returns Type Description List <T> InsertFirst(T) Declaration public void InsertFirst(T data) Parameters Type Name Description T data InsertFirst(SinglyLinkedListNode<T>) Inserts this element to the begining Declaration public void InsertFirst(SinglyLinkedListNode<T> current) Parameters Type Name Description SinglyLinkedListNode <T> current InsertLast(T) Declaration public void InsertLast(T data) Parameters Type Name Description T data IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.DataStructures.SinglyLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SinglyLinkedListNode-1.html",
    "title": "Class SinglyLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class SinglyLinkedListNode<T> Inheritance Object SinglyLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SinglyLinkedListNode<T> Type Parameters Name Description T Constructors SinglyLinkedListNode(T) Declaration public SinglyLinkedListNode(T data) Parameters Type Name Description T data Fields Data Declaration public T Data Field Value Type Description T Next Declaration public SinglyLinkedListNode<T> Next Field Value Type Description SinglyLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.SkipList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SkipList-1.html",
    "title": "Class SkipList<T> | Advanced Algorithms",
    "keywords": "Class SkipList<T> Inheritance Object SkipList<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SkipList<T> where T : IComparable Type Parameters Name Description T Constructors SkipList(Int32) Declaration public SkipList(int maxHeight = 32) Parameters Type Name Description Int32 maxHeight Properties MaxHeight Declaration public int MaxHeight { get; } Property Value Type Description Int32 Methods Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value Find(T) Declaration public T Find(T value) Parameters Type Name Description T value Returns Type Description T Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.SplayTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SplayTree-1.html",
    "title": "Class SplayTree<T> | Advanced Algorithms",
    "keywords": "Class SplayTree<T> Inheritance Object SplayTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SplayTree<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value FindMax() Declaration public T FindMax() Returns Type Description T FindMin() Declaration public T FindMin() Returns Type Description T GetHeight() Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Stack-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Stack-1.html",
    "title": "Class Stack<T> | Advanced Algorithms",
    "keywords": "Class Stack<T> Inheritance Object Stack<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Stack<T> Type Parameters Name Description T Constructors Stack(StackType) Declaration public Stack(StackType type = StackType.Array) Parameters Type Name Description StackType type Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Peek() Declaration public T Peek() Returns Type Description T Pop() Declaration public T Pop() Returns Type Description T Push(T) Declaration public void Push(T item) Parameters Type Name Description T item"
  },
  "api/Advanced.Algorithms.DataStructures.StackType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.StackType.html",
    "title": "Enum StackType | Advanced Algorithms",
    "keywords": "Enum StackType Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public enum StackType Fields Name Description Array LinkedList"
  },
  "api/Advanced.Algorithms.DataStructures.SuffixTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SuffixTree-1.html",
    "title": "Class SuffixTree<T> | Advanced Algorithms",
    "keywords": "Class SuffixTree<T> A simple suffix tree implementation using a trie Inheritance Object SuffixTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SuffixTree<T> Type Parameters Name Description T Constructors SuffixTree() Declaration public SuffixTree() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods ContainsPattern(T[]) returns if the entry pattern is in this suffix tree Declaration public bool ContainsPattern(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean Delete(T[]) deletes an entry from this suffix tree O(m^2) complexity if m is the length of the entry to be deleted Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry Insert(T[]) insert a new entry to suffix tree O(m^2) complexity if m is the length of entry array Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry StartsWithPattern(T[]) returns all sub entries that starts with this search pattern Declaration public List<T[]> StartsWithPattern(T[] entry) Parameters Type Name Description T[] entry Returns Type Description List <T[]>"
  },
  "api/Advanced.Algorithms.DataStructures.TernarySearchTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TernarySearchTree-1.html",
    "title": "Class TernarySearchTree<T> | Advanced Algorithms",
    "keywords": "Class TernarySearchTree<T> Inheritance Object TernarySearchTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TernarySearchTree<T> where T : IComparable Type Parameters Name Description T Constructors TernarySearchTree() Declaration public TernarySearchTree() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Contains(T[]) returns true if the entry exist Declaration public bool Contains(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean Delete(T[]) deletes a record from this TernarySearchTree O(m) where m is the length of entry Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry Insert(T[]) Insert a new record to this TernarySearchTree O(m) time complexity where m is the length of entry Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry StartsWith(T[]) returns a list of records matching this prefix Declaration public List<T[]> StartsWith(T[] prefix) Parameters Type Name Description T[] prefix Returns Type Description List <T[]>"
  },
  "api/Advanced.Algorithms.DataStructures.TreapTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreapTree-1.html",
    "title": "Class TreapTree<T> | Advanced Algorithms",
    "keywords": "Class TreapTree<T> Inheritance Object TreapTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreapTree<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value FindMax() Declaration public T FindMax() Returns Type Description T FindMin() Declaration public T FindMin() Returns Type Description T GetHeight() Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Tree.BpTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree.BpTree-1.html",
    "title": "Class BpTree<T> | Advanced Algorithms",
    "keywords": "Class BpTree<T> A B+ Tree implementation TODO support initial bulk loading TODO: make sure duplicates are handled correctly if its not already Inheritance Object BpTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Tree Assembly : Advanced.Algorithms.dll Syntax public class BpTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors BpTree(Int32) Declaration public BpTree(int maxKeysPerNode) Parameters Type Name Description Int32 maxKeysPerNode Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Max Declaration public T Max { get; } Property Value Type Description T Min Declaration public T Min { get; } Property Value Type Description T Methods Delete(T) Delete the given value from this BPTree Declaration public void Delete(T value) Parameters Type Name Description T value GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Inserts and element to B-Tree Declaration public void Insert(T newValue) Parameters Type Name Description T newValue Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Tree.BPTreeEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree.BPTreeEnumerator-1.html",
    "title": "Class BPTreeEnumerator<T> | Advanced Algorithms",
    "keywords": "Class BPTreeEnumerator<T> Inheritance Object BPTreeEnumerator<T> Implements IEnumerator <T> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Tree Assembly : Advanced.Algorithms.dll Syntax public class BPTreeEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator where T : IComparable Type Parameters Name Description T Constructors BPTreeEnumerator(BpTree<T>) Declaration public BPTreeEnumerator(BpTree<T> tree) Parameters Type Name Description BpTree <T> tree Properties Current Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Reset() Declaration public void Reset() Explicit Interface Implementations IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.Tree.BTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree.BTree-1.html",
    "title": "Class BTree<T> | Advanced Algorithms",
    "keywords": "Class BTree<T> Inheritance Object BTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Tree Assembly : Advanced.Algorithms.dll Syntax public class BTree<T> where T : IComparable Type Parameters Name Description T Constructors BTree(Int32) Declaration public BTree(int maxKeysPerNode) Parameters Type Name Description Int32 maxKeysPerNode Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Max Declaration public T Max { get; } Property Value Type Description T Min Declaration public T Min { get; } Property Value Type Description T Methods Delete(T) Delete the given value from this BTree Declaration public void Delete(T value) Parameters Type Name Description T value HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Inserts and element to B-Tree Declaration public void Insert(T newValue) Parameters Type Name Description T newValue"
  },
  "api/Advanced.Algorithms.DataStructures.Tree.ExpressionTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree.ExpressionTree-1.html",
    "title": "Class ExpressionTree<T> | Advanced Algorithms",
    "keywords": "Class ExpressionTree<T> A Expression tree implementation (POSIX tree) Inheritance Object ExpressionTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Tree Assembly : Advanced.Algorithms.dll Syntax public class ExpressionTree<T> Type Parameters Name Description T Methods Construct(T[], T[]) construct tree for given expression with given operators Declaration public void Construct(T[] expression, T[] operators) Parameters Type Name Description T[] expression T[] operators GetInfix() get infix expression Declaration public List<T> GetInfix() Returns Type Description List <T>"
  },
  "api/Advanced.Algorithms.DataStructures.Tree.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Tree | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Tree Classes BpTree<T> A B+ Tree implementation TODO support initial bulk loading TODO: make sure duplicates are handled correctly if its not already BPTreeEnumerator<T> BTree<T> ExpressionTree<T> A Expression tree implementation (POSIX tree) Interfaces IBSTNode<T>"
  },
  "api/Advanced.Algorithms.DataStructures.Tree.IBSTNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree.IBSTNode-1.html",
    "title": "Interface IBSTNode<T> | Advanced Algorithms",
    "keywords": "Interface IBSTNode<T> Namespace : Advanced.Algorithms.DataStructures.Tree Assembly : Advanced.Algorithms.dll Syntax public interface IBSTNode<T> where T : IComparable Type Parameters Name Description T Properties Left Declaration IBSTNode<T> Left { get; } Property Value Type Description IBSTNode <T> Right Declaration IBSTNode<T> Right { get; } Property Value Type Description IBSTNode <T> Value Declaration T Value { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.Tree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree-1.html",
    "title": "Class Tree<T> | Advanced Algorithms",
    "keywords": "Class Tree<T> Inheritance Object Tree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Tree<T> where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value Delete(T, T) Declaration public void Delete(T parentValue, T value) Parameters Type Name Description T parentValue T value GetHeight() Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T, T) Declaration public void Insert(T parentValue, T value) Parameters Type Name Description T parentValue T value"
  },
  "api/Advanced.Algorithms.DataStructures.TreeDictionary-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreeDictionary-2.html",
    "title": "Class TreeDictionary<TK, TV> | Advanced Algorithms",
    "keywords": "Class TreeDictionary<TK, TV> A Dictionary implementation using balanced binary search tree (log(n) operations in worst case) This may be better than regular Dictionary implementation which can give o(K) in worst case (but O(1) when collisions K is avoided ) Inheritance Object TreeDictionary<TK, TV> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreeDictionary<TK, TV> where TK : IComparable Type Parameters Name Description TK TV Constructors TreeDictionary() Declaration public TreeDictionary() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(TK, TV) Declaration public void Add(TK key, TV value) Parameters Type Name Description TK key TV value ContainsKey(TK) Declaration public bool ContainsKey(TK key) Parameters Type Name Description TK key Returns Type Description Boolean GetAll() Declaration public ArrayList<TreeDictionaryNode<TK, TV>> GetAll() Returns Type Description ArrayList < TreeDictionaryNode <TK, TV>> GetValue(TK) Declaration public TV GetValue(TK key) Parameters Type Name Description TK key Returns Type Description TV Remove(TK) Declaration public void Remove(TK key) Parameters Type Name Description TK key"
  },
  "api/Advanced.Algorithms.DataStructures.TreeDictionaryNode-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreeDictionaryNode-2.html",
    "title": "Class TreeDictionaryNode<TK, TV> | Advanced Algorithms",
    "keywords": "Class TreeDictionaryNode<TK, TV> Inheritance Object TreeDictionaryNode<TK, TV> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreeDictionaryNode<TK, TV> : IComparable where TK : IComparable Type Parameters Name Description TK TV Constructors TreeDictionaryNode(TK, TV) Declaration public TreeDictionaryNode(TK key, TV value) Parameters Type Name Description TK key TV value Properties Key Declaration public TK Key { get; } Property Value Type Description TK Value Declaration public TV Value { get; set; } Property Value Type Description TV Methods CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.TreeHashSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreeHashSet-1.html",
    "title": "Class TreeHashSet<V> | Advanced Algorithms",
    "keywords": "Class TreeHashSet<V> A HashSet implementation using balanced binary search tree (log(n) operations in worst case) This may be better than regular HashSet implementation which can give o(K) in worst case (but O(1) when collisions K is avoided ) Inheritance Object TreeHashSet<V> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreeHashSet<V> where V : IComparable Type Parameters Name Description V Constructors TreeHashSet() Declaration public TreeHashSet() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(V) Declaration public void Add(V value) Parameters Type Name Description V value Contains(V) Declaration public bool Contains(V value) Parameters Type Name Description V value Returns Type Description Boolean GetAll() Declaration public ArrayList<V> GetAll() Returns Type Description ArrayList <V> Remove(V) Declaration public void Remove(V value) Parameters Type Name Description V value"
  },
  "api/Advanced.Algorithms.DataStructures.TreeNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreeNode-1.html",
    "title": "Class TreeNode<T> | Advanced Algorithms",
    "keywords": "Class TreeNode<T> Inheritance Object TreeNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreeNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors TreeNode(TreeNode<T>, T) Declaration public TreeNode(TreeNode<T> parent, T value) Parameters Type Name Description TreeNode <T> parent T value Properties Children Declaration public SinglyLinkedList<TreeNode<T>> Children { get; set; } Property Value Type Description SinglyLinkedList < TreeNode <T>> IsLeaf Declaration public bool IsLeaf { get; } Property Value Type Description Boolean Parent Declaration public TreeNode<T> Parent { get; set; } Property Value Type Description TreeNode <T> Value Declaration public T Value { get; set; } Property Value Type Description T Methods CompareTo(TreeNode<T>) Declaration public int CompareTo(TreeNode<T> treeNode) Parameters Type Name Description TreeNode <T> treeNode Returns Type Description Int32 CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.Trie-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Trie-1.html",
    "title": "Class Trie<T> | Advanced Algorithms",
    "keywords": "Class Trie<T> Inheritance Object Trie<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Trie<T> Type Parameters Name Description T Constructors Trie() Declaration public Trie() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Contains(T[]) returns true if the entry exist Declaration public bool Contains(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean Delete(T[]) deletes a record from this trie O(m) where m is the length of entry Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry Insert(T[]) Insert a new record to this trie O(m) time complexity where m is the length of entry Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry StartsWith(T[]) returns a list of records matching this prefix Declaration public List<T[]> StartsWith(T[] prefix) Parameters Type Name Description T[] prefix Returns Type Description List <T[]>"
  },
  "api/Advanced.Algorithms.DistributedSystems.ConsistentHash-1.html": {
    "href": "api/Advanced.Algorithms.DistributedSystems.ConsistentHash-1.html",
    "title": "Class ConsistentHash<T> | Advanced Algorithms",
    "keywords": "Class ConsistentHash<T> A consistant hash implementation with MurmurHash Adapted from https://github.com/wsq003/consistent-hash/blob/master/ConsistentHash.cs Inheritance Object ConsistentHash<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DistributedSystems Assembly : Advanced.Algorithms.dll Syntax public class ConsistentHash<T> Type Parameters Name Description T Constructors ConsistentHash() Declaration public ConsistentHash() ConsistentHash(IEnumerable<T>, Int32) Declaration public ConsistentHash(IEnumerable<T> nodes, int replicas) Parameters Type Name Description IEnumerable <T> nodes Int32 replicas Methods AddNode(T) Add a new bucket Declaration public void AddNode(T node) Parameters Type Name Description T node GetNode(String) Get the bucket for the given Key Declaration public T GetNode(string key) Parameters Type Name Description String key Returns Type Description T RemoveNode(T) Remove a bucket from lookUp Declaration public void RemoveNode(T node) Parameters Type Name Description T node"
  },
  "api/Advanced.Algorithms.DistributedSystems.html": {
    "href": "api/Advanced.Algorithms.DistributedSystems.html",
    "title": "Namespace Advanced.Algorithms.DistributedSystems | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DistributedSystems Classes ConsistentHash<T> A consistant hash implementation with MurmurHash Adapted from https://github.com/wsq003/consistent-hash/blob/master/ConsistentHash.cs LRUCache<K, V>"
  },
  "api/Advanced.Algorithms.DistributedSystems.LRUCache-2.html": {
    "href": "api/Advanced.Algorithms.DistributedSystems.LRUCache-2.html",
    "title": "Class LRUCache<K, V> | Advanced Algorithms",
    "keywords": "Class LRUCache<K, V> Inheritance Object LRUCache<K, V> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DistributedSystems Assembly : Advanced.Algorithms.dll Syntax public class LRUCache<K, V> Type Parameters Name Description K V Constructors LRUCache(Int32) Declaration public LRUCache(int capacity) Parameters Type Name Description Int32 capacity Methods Get(K) O(1) time complexity Declaration public V Get(K key) Parameters Type Name Description K key Returns Type Description V Put(K, V) O(1) time complexity Declaration public void Put(K key, V value) Parameters Type Name Description K key V value"
  },
  "api/Advanced.Algorithms.Geometry.ClosestPointPair.html": {
    "href": "api/Advanced.Algorithms.Geometry.ClosestPointPair.html",
    "title": "Class ClosestPointPair | Advanced Algorithms",
    "keywords": "Class ClosestPointPair Inheritance Object ClosestPointPair Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class ClosestPointPair Methods Find(List<Point>, Int32, Int32) Declaration public static double Find(List<Point> points, int left, int right) Parameters Type Name Description List < Point > points Int32 left Int32 right Returns Type Description Double Find(List<Int32[]>) Declaration public static double Find(List<int[]> points) Parameters Type Name Description List < Int32 []> points Returns Type Description Double"
  },
  "api/Advanced.Algorithms.Geometry.ConvexHull.html": {
    "href": "api/Advanced.Algorithms.Geometry.ConvexHull.html",
    "title": "Class ConvexHull | Advanced Algorithms",
    "keywords": "Class ConvexHull Convex hull using jarvis's algorithm Inheritance Object ConvexHull Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class ConvexHull Methods Find(List<Int32[]>) Declaration public static List<int[]> Find(List<int[]> points) Parameters Type Name Description List < Int32 []> points Returns Type Description List < Int32 []>"
  },
  "api/Advanced.Algorithms.Geometry.html": {
    "href": "api/Advanced.Algorithms.Geometry.html",
    "title": "Namespace Advanced.Algorithms.Geometry | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Geometry Classes ClosestPointPair ConvexHull Convex hull using jarvis's algorithm LineIntersection PointInsidePolygon PointRotation RectangleIntersection Structs Line Point Rectangle"
  },
  "api/Advanced.Algorithms.Geometry.Line.html": {
    "href": "api/Advanced.Algorithms.Geometry.Line.html",
    "title": "Struct Line | Advanced Algorithms",
    "keywords": "Struct Line Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public struct Line Properties x1 Declaration public double x1 { get; set; } Property Value Type Description Double x2 Declaration public double x2 { get; set; } Property Value Type Description Double y1 Declaration public double y1 { get; set; } Property Value Type Description Double y2 Declaration public double y2 { get; set; } Property Value Type Description Double"
  },
  "api/Advanced.Algorithms.Geometry.LineIntersection.html": {
    "href": "api/Advanced.Algorithms.Geometry.LineIntersection.html",
    "title": "Class LineIntersection | Advanced Algorithms",
    "keywords": "Class LineIntersection Inheritance Object LineIntersection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class LineIntersection Methods FindIntersection(Line, Line) Returns Point of intersection if do intersect otherwise default Point (null) Declaration public static Point FindIntersection(Line lineA, Line lineB) Parameters Type Name Description Line lineA Line lineB Returns Type Description Point"
  },
  "api/Advanced.Algorithms.Geometry.Point.html": {
    "href": "api/Advanced.Algorithms.Geometry.Point.html",
    "title": "Struct Point | Advanced Algorithms",
    "keywords": "Struct Point Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public struct Point Properties x Declaration public double x { get; set; } Property Value Type Description Double y Declaration public double y { get; set; } Property Value Type Description Double"
  },
  "api/Advanced.Algorithms.Geometry.PointInsidePolygon.html": {
    "href": "api/Advanced.Algorithms.Geometry.PointInsidePolygon.html",
    "title": "Class PointInsidePolygon | Advanced Algorithms",
    "keywords": "Class PointInsidePolygon Inheritance Object PointInsidePolygon Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class PointInsidePolygon Methods IsInside(List<Int32[]>, Int32[]) Declaration public static bool IsInside(List<int[]> polygonEdgePoints, int[] testPoint) Parameters Type Name Description List < Int32 []> polygonEdgePoints Int32 [] testPoint Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Geometry.PointRotation.html": {
    "href": "api/Advanced.Algorithms.Geometry.PointRotation.html",
    "title": "Class PointRotation | Advanced Algorithms",
    "keywords": "Class PointRotation Inheritance Object PointRotation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class PointRotation Methods Rotate(Point, Point, Int32) Declaration public static Point Rotate(Point center, Point point, int angle) Parameters Type Name Description Point center Point point Int32 angle Returns Type Description Point"
  },
  "api/Advanced.Algorithms.Geometry.Rectangle.html": {
    "href": "api/Advanced.Algorithms.Geometry.Rectangle.html",
    "title": "Struct Rectangle | Advanced Algorithms",
    "keywords": "Struct Rectangle Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public struct Rectangle Properties leftTopCorner Declaration public Point leftTopCorner { get; set; } Property Value Type Description Point rightBottomCorner Declaration public Point rightBottomCorner { get; set; } Property Value Type Description Point"
  },
  "api/Advanced.Algorithms.Geometry.RectangleIntersection.html": {
    "href": "api/Advanced.Algorithms.Geometry.RectangleIntersection.html",
    "title": "Class RectangleIntersection | Advanced Algorithms",
    "keywords": "Class RectangleIntersection Inheritance Object RectangleIntersection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class RectangleIntersection Methods FindIntersection(Rectangle, Rectangle) Returns the rectangle formed by the intersection if do intersect Otherwise default value of Rectangle struct Declaration public static Rectangle FindIntersection(Rectangle A, Rectangle B) Parameters Type Name Description Rectangle A Rectangle B Returns Type Description Rectangle"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.ArticulationPoint.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.ArticulationPoint.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.ArticulationPoint | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.ArticulationPoint Classes TarjansArticulationFinder<T> Articulation point finder using Tarjan's algorithm"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.ArticulationPoint.TarjansArticulationFinder-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.ArticulationPoint.TarjansArticulationFinder-1.html",
    "title": "Class TarjansArticulationFinder<T> | Advanced Algorithms",
    "keywords": "Class TarjansArticulationFinder<T> Articulation point finder using Tarjan's algorithm Inheritance Object TarjansArticulationFinder<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.ArticulationPoint Assembly : Advanced.Algorithms.dll Syntax public class TarjansArticulationFinder<T> Type Parameters Name Description T Methods FindArticulationPoints(Graph<T>) returns a list if articulation points in this graph Declaration public List<T> FindArticulationPoints(Graph<T> graph) Parameters Type Name Description Graph <T> graph Returns Type Description List <T>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.BellmanFordShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.BellmanFordShortestPath-2.html",
    "title": "Class BellmanFordShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class BellmanFordShortestPath<T, W> A Bellman Ford algorithm implementation Inheritance Object BellmanFordShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class BellmanFordShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors BellmanFordShortestPath(IShortestPathOperators<W>) Declaration public BellmanFordShortestPath(IShortestPathOperators<W> operators) Parameters Type Name Description IShortestPathOperators <W> operators Methods GetShortestPath(WeightedDiGraph<T, W>, T, T) Get shortest distance to target Declaration public ShortestPathResult<T, W> GetShortestPath(WeightedDiGraph<T, W> graph, T source, T destination) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T destination Returns Type Description ShortestPathResult <T, W>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Bridge.Bridge-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Bridge.Bridge-1.html",
    "title": "Class Bridge<T> | Advanced Algorithms",
    "keywords": "Class Bridge<T> Inheritance Object Bridge<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Bridge Assembly : Advanced.Algorithms.dll Syntax public class Bridge<T> Type Parameters Name Description T Constructors Bridge(T, T) Declaration public Bridge(T vertexA, T vertexB) Parameters Type Name Description T vertexA T vertexB Properties vertexA Declaration public T vertexA { get; } Property Value Type Description T vertexB Declaration public T vertexB { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Bridge.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Bridge.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Bridge | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Bridge Classes Bridge<T> TarjansBridgeFinder<T> Bridge finder using Tarjan's algorithm"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Bridge.TarjansBridgeFinder-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Bridge.TarjansBridgeFinder-1.html",
    "title": "Class TarjansBridgeFinder<T> | Advanced Algorithms",
    "keywords": "Class TarjansBridgeFinder<T> Bridge finder using Tarjan's algorithm Inheritance Object TarjansBridgeFinder<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Bridge Assembly : Advanced.Algorithms.dll Syntax public class TarjansBridgeFinder<T> Type Parameters Name Description T Methods FindBridges(Graph<T>) returns a list if Bridge points in this graph Declaration public List<Bridge<T>> FindBridges(Graph<T> graph) Parameters Type Name Description Graph <T> graph Returns Type Description List < Bridge <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Coloring.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Coloring.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Coloring | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Coloring Classes MColorer<T, C> MColorResult<T, C>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Coloring.MColorer-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Coloring.MColorer-2.html",
    "title": "Class MColorer<T, C> | Advanced Algorithms",
    "keywords": "Class MColorer<T, C> Inheritance Object MColorer<T, C> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Coloring Assembly : Advanced.Algorithms.dll Syntax public class MColorer<T, C> Type Parameters Name Description T C Methods Color(Graph<T>, C[]) returns true if all vertices can be colored using the given colors in such a way so that no neighbours have same color Declaration public MColorResult<T, C> Color(Graph<T> graph, C[] colors) Parameters Type Name Description Graph <T> graph C[] colors Returns Type Description MColorResult <T, C>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Coloring.MColorResult-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Coloring.MColorResult-2.html",
    "title": "Class MColorResult<T, C> | Advanced Algorithms",
    "keywords": "Class MColorResult<T, C> Inheritance Object MColorResult<T, C> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Coloring Assembly : Advanced.Algorithms.dll Syntax public class MColorResult<T, C> Type Parameters Name Description T C Constructors MColorResult(Boolean, Dictionary<C, List<T>>) Declaration public MColorResult(bool canColor, Dictionary<C, List<T>> partitions) Parameters Type Name Description Boolean canColor Dictionary <C, List <T>> partitions Properties CanColor Declaration public bool CanColor { get; } Property Value Type Description Boolean Partitions Declaration public Dictionary<C, List<T>> Partitions { get; } Property Value Type Description Dictionary <C, List <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Connectivity.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Connectivity.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Connectivity | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Connectivity Classes KosarajuStronglyConnected<T> A Kosaraju Strong Connected Component Algorithm Implementation TarjansBiConnected<T> Finds if a graph is BiConnected TarjansStronglyConnected<T> StronglyConnected using Tarjan's algorithm"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Connectivity.KosarajuStronglyConnected-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Connectivity.KosarajuStronglyConnected-1.html",
    "title": "Class KosarajuStronglyConnected<T> | Advanced Algorithms",
    "keywords": "Class KosarajuStronglyConnected<T> A Kosaraju Strong Connected Component Algorithm Implementation Inheritance Object KosarajuStronglyConnected<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Connectivity Assembly : Advanced.Algorithms.dll Syntax public class KosarajuStronglyConnected<T> Type Parameters Name Description T Methods FindStronglyConnectedComponents(DiGraph<T>) Returns all Connected Components using Kosaraju's Algorithm Declaration public List<List<T>> FindStronglyConnectedComponents(DiGraph<T> graph) Parameters Type Name Description DiGraph <T> graph Returns Type Description List < List <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Connectivity.TarjansBiConnected-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Connectivity.TarjansBiConnected-1.html",
    "title": "Class TarjansBiConnected<T> | Advanced Algorithms",
    "keywords": "Class TarjansBiConnected<T> Finds if a graph is BiConnected Inheritance Object TarjansBiConnected<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Connectivity Assembly : Advanced.Algorithms.dll Syntax public class TarjansBiConnected<T> Type Parameters Name Description T Methods IsBiConnected(Graph<T>) This is using ariticulation alogrithm based on the observation that a graph is BiConnected if and only if there is no articulation Points Declaration public bool IsBiConnected(Graph<T> graph) Parameters Type Name Description Graph <T> graph Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Connectivity.TarjansStronglyConnected-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Connectivity.TarjansStronglyConnected-1.html",
    "title": "Class TarjansStronglyConnected<T> | Advanced Algorithms",
    "keywords": "Class TarjansStronglyConnected<T> StronglyConnected using Tarjan's algorithm Inheritance Object TarjansStronglyConnected<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Connectivity Assembly : Advanced.Algorithms.dll Syntax public class TarjansStronglyConnected<T> Type Parameters Name Description T Methods FindStronglyConnectedComponents(DiGraph<T>) returns a list if Strongly Connected components in this graph Declaration public List<List<T>> FindStronglyConnectedComponents(DiGraph<T> graph) Parameters Type Name Description DiGraph <T> graph Returns Type Description List < List <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Cover.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Cover.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Cover | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Cover Classes MinVertexCover<T>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Cover.MinVertexCover-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Cover.MinVertexCover-1.html",
    "title": "Class MinVertexCover<T> | Advanced Algorithms",
    "keywords": "Class MinVertexCover<T> Inheritance Object MinVertexCover<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Cover Assembly : Advanced.Algorithms.dll Syntax public class MinVertexCover<T> Type Parameters Name Description T Methods GetMinVertexCover(Graph<T>) Declaration public List<GraphVertex<T>> GetMinVertexCover(Graph<T> graph) Parameters Type Name Description Graph <T> graph Returns Type Description List < GraphVertex <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Cut.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Cut.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Cut | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Cut Classes MinCut<T, W> Commpute minimum cut edges of given graph using Edmond Karps improved Ford-Fulkerson Max Flow Algorithm MinCutEdge<T>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Cut.MinCut-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Cut.MinCut-2.html",
    "title": "Class MinCut<T, W> | Advanced Algorithms",
    "keywords": "Class MinCut<T, W> Commpute minimum cut edges of given graph using Edmond Karps improved Ford-Fulkerson Max Flow Algorithm Inheritance Object MinCut<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Cut Assembly : Advanced.Algorithms.dll Syntax public class MinCut<T, W> where W : IComparable Type Parameters Name Description T W Constructors MinCut(IFlowOperators<W>) Declaration public MinCut(IFlowOperators<W> operators) Parameters Type Name Description IFlowOperators <W> operators Methods ComputeMinCut(WeightedDiGraph<T, W>, T, T) Declaration public List<MinCutEdge<T>> ComputeMinCut(WeightedDiGraph<T, W> graph, T source, T sink) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T sink Returns Type Description List < MinCutEdge <T>> GetReachable(WeightedDiGraph<T, W>, WeightedDiGraph<T, W>, T) Gets a list of reachable vertices in residual graph from source Declaration public HashSet<T> GetReachable(WeightedDiGraph<T, W> graph, WeightedDiGraph<T, W> residualGraph, T source) Parameters Type Name Description WeightedDiGraph <T, W> graph WeightedDiGraph <T, W> residualGraph T source Returns Type Description HashSet <T>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Cut.MinCutEdge-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Cut.MinCutEdge-1.html",
    "title": "Class MinCutEdge<T> | Advanced Algorithms",
    "keywords": "Class MinCutEdge<T> Inheritance Object MinCutEdge<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Cut Assembly : Advanced.Algorithms.dll Syntax public class MinCutEdge<T> Type Parameters Name Description T Constructors MinCutEdge(T, T) Declaration public MinCutEdge(T source, T dest) Parameters Type Name Description T source T dest Properties Destination Declaration public T Destination { get; } Property Value Type Description T Source Declaration public T Source { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Cycle.CycleDetector-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Cycle.CycleDetector-1.html",
    "title": "Class CycleDetector<T> | Advanced Algorithms",
    "keywords": "Class CycleDetector<T> Cycle detection using Depth First Search Inheritance Object CycleDetector<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Cycle Assembly : Advanced.Algorithms.dll Syntax public class CycleDetector<T> Type Parameters Name Description T Methods HasCycle(DiGraph<T>) Returns true if a cycle exists Declaration public bool HasCycle(DiGraph<T> graph) Parameters Type Name Description DiGraph <T> graph Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Cycle.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Cycle.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Cycle | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Cycle Classes CycleDetector<T> Cycle detection using Depth First Search"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.DijikstraShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.DijikstraShortestPath-2.html",
    "title": "Class DijikstraShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class DijikstraShortestPath<T, W> A dijikstra algorithm implementation using Fibornacci Heap Inheritance Object DijikstraShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class DijikstraShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors DijikstraShortestPath(IShortestPathOperators<W>) Declaration public DijikstraShortestPath(IShortestPathOperators<W> operators) Parameters Type Name Description IShortestPathOperators <W> operators Methods GetShortestPath(WeightedDiGraph<T, W>, T, T) Get shortest distance to target Declaration public ShortestPathResult<T, W> GetShortestPath(WeightedDiGraph<T, W> graph, T source, T destination) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T destination Returns Type Description ShortestPathResult <T, W>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Flow.EdmondKarpMaxFlow-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Flow.EdmondKarpMaxFlow-2.html",
    "title": "Class EdmondKarpMaxFlow<T, W> | Advanced Algorithms",
    "keywords": "Class EdmondKarpMaxFlow<T, W> Inheritance Object EdmondKarpMaxFlow<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Flow Assembly : Advanced.Algorithms.dll Syntax public class EdmondKarpMaxFlow<T, W> where W : IComparable Type Parameters Name Description T W Constructors EdmondKarpMaxFlow(IFlowOperators<W>) Declaration public EdmondKarpMaxFlow(IFlowOperators<W> operators) Parameters Type Name Description IFlowOperators <W> operators Methods ComputeMaxFlow(WeightedDiGraph<T, W>, T, T) Compute max flow by searching a path And then augmenting the residual graph until no more path exists in residual graph with possible flow Declaration public W ComputeMaxFlow(WeightedDiGraph<T, W> graph, T source, T sink) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T sink Returns Type Description W ComputeMaxFlowAndReturnResidualGraph(WeightedDiGraph<T, W>, T, T) Compute max flow by searching a path And then augmenting the residual graph until no more path exists in residual graph with possible flow Declaration public WeightedDiGraph<T, W> ComputeMaxFlowAndReturnResidualGraph(WeightedDiGraph<T, W> graph, T source, T sink) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T sink Returns Type Description WeightedDiGraph <T, W> Residual Graph"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Flow.FordFulkersonMaxFlow-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Flow.FordFulkersonMaxFlow-2.html",
    "title": "Class FordFulkersonMaxFlow<T, W> | Advanced Algorithms",
    "keywords": "Class FordFulkersonMaxFlow<T, W> Inheritance Object FordFulkersonMaxFlow<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Flow Assembly : Advanced.Algorithms.dll Syntax public class FordFulkersonMaxFlow<T, W> where W : IComparable Type Parameters Name Description T W Constructors FordFulkersonMaxFlow(IFlowOperators<W>) Declaration public FordFulkersonMaxFlow(IFlowOperators<W> operators) Parameters Type Name Description IFlowOperators <W> operators Methods ComputeMaxFlow(WeightedDiGraph<T, W>, T, T) Compute max flow by searching a path And then augmenting the residual graph until no more path exists in residual graph with possible flow Declaration public W ComputeMaxFlow(WeightedDiGraph<T, W> graph, T source, T sink) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T sink Returns Type Description W ComputeMaxFlowAndReturnFlowPath(WeightedDiGraph<T, W>, T, T) Return all flow Paths Declaration public List<List<T>> ComputeMaxFlowAndReturnFlowPath(WeightedDiGraph<T, W> graph, T source, T sink) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T sink Returns Type Description List < List <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Flow.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Flow.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Flow | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Flow Classes EdmondKarpMaxFlow<T, W> FordFulkersonMaxFlow<T, W> PushRelabelMaxFlow<T, W> A Push-Relabel algorithm implementation Interfaces IFlowOperators<W> Operators to deal with generic Add, Substract etc on edge weights"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Flow.IFlowOperators-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Flow.IFlowOperators-1.html",
    "title": "Interface IFlowOperators<W> | Advanced Algorithms",
    "keywords": "Interface IFlowOperators<W> Operators to deal with generic Add, Substract etc on edge weights Namespace : Advanced.Algorithms.GraphAlgorithms.Flow Assembly : Advanced.Algorithms.dll Syntax public interface IFlowOperators<W> where W : IComparable Type Parameters Name Description W Properties defaultWeight default value for this type W Declaration W defaultWeight { get; } Property Value Type Description W MaxWeight returns the max for this type W Declaration W MaxWeight { get; } Property Value Type Description W Methods AddWeights(W, W) add two weights Declaration W AddWeights(W a, W b) Parameters Type Name Description W a W b Returns Type Description W SubstractWeights(W, W) substract b from a Declaration W SubstractWeights(W a, W b) Parameters Type Name Description W a W b Returns Type Description W"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Flow.PushRelabelMaxFlow-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Flow.PushRelabelMaxFlow-2.html",
    "title": "Class PushRelabelMaxFlow<T, W> | Advanced Algorithms",
    "keywords": "Class PushRelabelMaxFlow<T, W> A Push-Relabel algorithm implementation Inheritance Object PushRelabelMaxFlow<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Flow Assembly : Advanced.Algorithms.dll Syntax public class PushRelabelMaxFlow<T, W> where W : IComparable Type Parameters Name Description T W Constructors PushRelabelMaxFlow(IFlowOperators<W>) Declaration public PushRelabelMaxFlow(IFlowOperators<W> operators) Parameters Type Name Description IFlowOperators <W> operators Methods ComputeMaxFlow(WeightedDiGraph<T, W>, T, T) Computes Max Flow using Push-Relabel algorithm Declaration public W ComputeMaxFlow(WeightedDiGraph<T, W> graph, T source, T sink) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T sink Returns Type Description W ComputeMaxFlowAndReturnFlowPath(WeightedDiGraph<T, W>, T, T) Return all flow Paths Declaration public List<List<T>> ComputeMaxFlowAndReturnFlowPath(WeightedDiGraph<T, W> graph, T source, T sink) Parameters Type Name Description WeightedDiGraph <T, W> graph T source T sink Returns Type Description List < List <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms Classes BellmanFordShortestPath<T, W> A Bellman Ford algorithm implementation DijikstraShortestPath<T, W> A dijikstra algorithm implementation using Fibornacci Heap ShortestPathResult<T, W> For result TravellingSalesman Problem details below https://en.wikipedia.org/wiki/Travelling_salesman_problem Uses dynamic programming and have psuedo-polynomial time runtime complexity for this NP hard problem Interfaces IShortestPathOperators<W> generic operators"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.IShortestPathOperators-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.IShortestPathOperators-1.html",
    "title": "Interface IShortestPathOperators<W> | Advanced Algorithms",
    "keywords": "Interface IShortestPathOperators<W> generic operators Namespace : Advanced.Algorithms.GraphAlgorithms Assembly : Advanced.Algorithms.dll Syntax public interface IShortestPathOperators<W> where W : IComparable Type Parameters Name Description W Properties DefaultValue Declaration W DefaultValue { get; } Property Value Type Description W MaxValue Declaration W MaxValue { get; } Property Value Type Description W Methods Sum(W, W) Declaration W Sum(W a, W b) Parameters Type Name Description W a W b Returns Type Description W"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Matching.BiPartiteMatching-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Matching.BiPartiteMatching-1.html",
    "title": "Class BiPartiteMatching<T> | Advanced Algorithms",
    "keywords": "Class BiPartiteMatching<T> Compute Max BiParitite Edges using Ford-Fukerson algorithm Inheritance Object BiPartiteMatching<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Matching Assembly : Advanced.Algorithms.dll Syntax public class BiPartiteMatching<T> Type Parameters Name Description T Constructors BiPartiteMatching(IBiPartiteMatchOperators<T>) Declaration public BiPartiteMatching(IBiPartiteMatchOperators<T> operators) Parameters Type Name Description IBiPartiteMatchOperators <T> operators Methods GetMaxBiPartiteMatching(Graph<T>) Returns a list of Max BiPartite Match Edges Declaration public List<MatchEdge<T>> GetMaxBiPartiteMatching(Graph<T> graph) Parameters Type Name Description Graph <T> graph Returns Type Description List < MatchEdge <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Matching.HopcroftKarpMatching-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Matching.HopcroftKarpMatching-1.html",
    "title": "Class HopcroftKarpMatching<T> | Advanced Algorithms",
    "keywords": "Class HopcroftKarpMatching<T> Compute Max BiParitite Edges using Hopcroft Karp algorithm Inheritance Object HopcroftKarpMatching<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Matching Assembly : Advanced.Algorithms.dll Syntax public class HopcroftKarpMatching<T> Type Parameters Name Description T Constructors HopcroftKarpMatching(IBiPartiteMatchOperators<T>) Declaration public HopcroftKarpMatching(IBiPartiteMatchOperators<T> operators) Parameters Type Name Description IBiPartiteMatchOperators <T> operators Methods GetMaxBiPartiteMatching(Graph<T>) Returns a list of Max BiPartite Match Edges Declaration public List<MatchEdge<T>> GetMaxBiPartiteMatching(Graph<T> graph) Parameters Type Name Description Graph <T> graph Returns Type Description List < MatchEdge <T>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Matching.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Matching.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Matching | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Matching Classes BiPartiteMatching<T> Compute Max BiParitite Edges using Ford-Fukerson algorithm HopcroftKarpMatching<T> Compute Max BiParitite Edges using Hopcroft Karp algorithm MatchEdge<T> Interfaces IBiPartiteMatchOperators<T>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Matching.IBiPartiteMatchOperators-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Matching.IBiPartiteMatchOperators-1.html",
    "title": "Interface IBiPartiteMatchOperators<T> | Advanced Algorithms",
    "keywords": "Interface IBiPartiteMatchOperators<T> Inherited Members IFlowOperators<Int32>.defaultWeight IFlowOperators<Int32>.MaxWeight IFlowOperators<Int32>.AddWeights(Int32, Int32) IFlowOperators<Int32>.SubstractWeights(Int32, Int32) Namespace : Advanced.Algorithms.GraphAlgorithms.Matching Assembly : Advanced.Algorithms.dll Syntax public interface IBiPartiteMatchOperators<T> : IFlowOperators<int> Type Parameters Name Description T Methods GetRandomUniqueVertex() Get a random unique vertex not in graph required for dummy source/destination vertex for ford-fulkerson max flow Declaration T GetRandomUniqueVertex() Returns Type Description T"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Matching.MatchEdge-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Matching.MatchEdge-1.html",
    "title": "Class MatchEdge<T> | Advanced Algorithms",
    "keywords": "Class MatchEdge<T> Inheritance Object MatchEdge<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Matching Assembly : Advanced.Algorithms.dll Syntax public class MatchEdge<T> Type Parameters Name Description T Constructors MatchEdge(T, T) Declaration public MatchEdge(T source, T target) Parameters Type Name Description T source T target Properties Source Declaration public T Source { get; } Property Value Type Description T Target Declaration public T Target { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree Classes Kruskals<T, W> MSTEdge<T, W> MST edge object Prims<T, W> A Prims algorithm implementation"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree.Kruskals-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree.Kruskals-2.html",
    "title": "Class Kruskals<T, W> | Advanced Algorithms",
    "keywords": "Class Kruskals<T, W> Inheritance Object Kruskals<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree Assembly : Advanced.Algorithms.dll Syntax public class Kruskals<T, W> where W : IComparable Type Parameters Name Description T W Methods FindMinimumSpanningTree(WeightedGraph<T, W>) Find Minimum Spanning Tree of given weighted graph Declaration public List<MSTEdge<T, W>> FindMinimumSpanningTree(WeightedGraph<T, W> graph) Parameters Type Name Description WeightedGraph <T, W> graph Returns Type Description List < MSTEdge <T, W>> List of MST edges"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree.MSTEdge-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree.MSTEdge-2.html",
    "title": "Class MSTEdge<T, W> | Advanced Algorithms",
    "keywords": "Class MSTEdge<T, W> MST edge object Inheritance Object MSTEdge<T, W> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree Assembly : Advanced.Algorithms.dll Syntax public class MSTEdge<T, W> : IComparable where W : IComparable Type Parameters Name Description T W Properties Destination Declaration public T Destination { get; } Property Value Type Description T Source Declaration public T Source { get; } Property Value Type Description T Weight Declaration public W Weight { get; } Property Value Type Description W Methods CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree.Prims-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree.Prims-2.html",
    "title": "Class Prims<T, W> | Advanced Algorithms",
    "keywords": "Class Prims<T, W> A Prims algorithm implementation Inheritance Object Prims<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.MinimumSpanningTree Assembly : Advanced.Algorithms.dll Syntax public class Prims<T, W> where W : IComparable Type Parameters Name Description T W Methods FindMinimumSpanningTree(WeightedGraph<T, W>) Find Minimum Spanning Tree of given weighted graph Declaration public List<MSTEdge<T, W>> FindMinimumSpanningTree(WeightedGraph<T, W> graph) Parameters Type Name Description WeightedGraph <T, W> graph Returns Type Description List < MSTEdge <T, W>> List of MST edges"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Search.BiDirectional-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Search.BiDirectional-1.html",
    "title": "Class BiDirectional<T> | Advanced Algorithms",
    "keywords": "Class BiDirectional<T> A BiDirectional Path Search on DiGraph Inheritance Object BiDirectional<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class BiDirectional<T> Type Parameters Name Description T Methods PathExists(DiGraph<T>, T, T) Returns true if Path exists from source to destination Declaration public bool PathExists(DiGraph<T> graph, T source, T destination) Parameters Type Name Description DiGraph <T> graph T source T destination Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Search.BreadthFirst-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Search.BreadthFirst-1.html",
    "title": "Class BreadthFirst<T> | Advanced Algorithms",
    "keywords": "Class BreadthFirst<T> Bread First Search implementation Inheritance Object BreadthFirst<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class BreadthFirst<T> Type Parameters Name Description T Methods Find(Graph<T>, T) Returns true if item exists Declaration public bool Find(Graph<T> graph, T vertex) Parameters Type Name Description Graph <T> graph T vertex Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Search.DepthFirst-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Search.DepthFirst-1.html",
    "title": "Class DepthFirst<T> | Advanced Algorithms",
    "keywords": "Class DepthFirst<T> Depth First Search Inheritance Object DepthFirst<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class DepthFirst<T> Type Parameters Name Description T Methods Find(Graph<T>, T) Returns true if item exists Declaration public bool Find(Graph<T> graph, T vertex) Parameters Type Name Description Graph <T> graph T vertex Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.Search.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.Search.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.Search | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.Search Classes BiDirectional<T> A BiDirectional Path Search on DiGraph BreadthFirst<T> Bread First Search implementation DepthFirst<T> Depth First Search"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.AllPairShortestPathResult-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.AllPairShortestPathResult-2.html",
    "title": "Class AllPairShortestPathResult<T, W> | Advanced Algorithms",
    "keywords": "Class AllPairShortestPathResult<T, W> Result object Inheritance Object AllPairShortestPathResult<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.ShortestPath Assembly : Advanced.Algorithms.dll Syntax public class AllPairShortestPathResult<T, W> where W : IComparable Type Parameters Name Description T W Constructors AllPairShortestPathResult(T, T, W, List<T>) Declaration public AllPairShortestPathResult(T source, T destination, W distance, List<T> path) Parameters Type Name Description T source T destination W distance List <T> path Properties Destination Declaration public T Destination { get; } Property Value Type Description T Distance Declaration public W Distance { get; } Property Value Type Description W Path Declaration public List<T> Path { get; } Property Value Type Description List <T> Source Declaration public T Source { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.FloydWarshallShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.FloydWarshallShortestPath-2.html",
    "title": "Class FloydWarshallShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class FloydWarshallShortestPath<T, W> Inheritance Object FloydWarshallShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.ShortestPath Assembly : Advanced.Algorithms.dll Syntax public class FloydWarshallShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors FloydWarshallShortestPath(IShortestPathOperators<W>) Declaration public FloydWarshallShortestPath(IShortestPathOperators<W> operators) Parameters Type Name Description IShortestPathOperators <W> operators Methods GetAllPairShortestPaths(WeightedGraph<T, W>) Declaration public List<AllPairShortestPathResult<T, W>> GetAllPairShortestPaths(WeightedGraph<T, W> graph) Parameters Type Name Description WeightedGraph <T, W> graph Returns Type Description List < AllPairShortestPathResult <T, W>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.ShortestPath | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.ShortestPath Classes AllPairShortestPathResult<T, W> Result object FloydWarshallShortestPath<T, W> JohnsonsShortestPath<T, W> Interfaces IJohnsonsShortestPathOperators<T, W> generic operators"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.IJohnsonsShortestPathOperators-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.IJohnsonsShortestPathOperators-2.html",
    "title": "Interface IJohnsonsShortestPathOperators<T, W> | Advanced Algorithms",
    "keywords": "Interface IJohnsonsShortestPathOperators<T, W> generic operators Inherited Members IShortestPathOperators<W>.DefaultValue IShortestPathOperators<W>.MaxValue IShortestPathOperators<W>.Sum(W, W) Namespace : Advanced.Algorithms.GraphAlgorithms.ShortestPath Assembly : Advanced.Algorithms.dll Syntax public interface IJohnsonsShortestPathOperators<T, W> : IShortestPathOperators<W> where W : IComparable Type Parameters Name Description T W Methods RandomVertex() gives a random vertex not in the graph Declaration T RandomVertex() Returns Type Description T Substract(W, W) Substract a from b Declaration W Substract(W a, W b) Parameters Type Name Description W a W b Returns Type Description W"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.JohnsonsShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.ShortestPath.JohnsonsShortestPath-2.html",
    "title": "Class JohnsonsShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class JohnsonsShortestPath<T, W> Inheritance Object JohnsonsShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.ShortestPath Assembly : Advanced.Algorithms.dll Syntax public class JohnsonsShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors JohnsonsShortestPath(IJohnsonsShortestPathOperators<T, W>) Declaration public JohnsonsShortestPath(IJohnsonsShortestPathOperators<T, W> operators) Parameters Type Name Description IJohnsonsShortestPathOperators <T, W> operators Methods GetAllPairShortestPaths(WeightedDiGraph<T, W>) Declaration public List<AllPairShortestPathResult<T, W>> GetAllPairShortestPaths(WeightedDiGraph<T, W> graph) Parameters Type Name Description WeightedDiGraph <T, W> graph Returns Type Description List < AllPairShortestPathResult <T, W>>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.ShortestPathResult-2.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.ShortestPathResult-2.html",
    "title": "Class ShortestPathResult<T, W> | Advanced Algorithms",
    "keywords": "Class ShortestPathResult<T, W> For result Inheritance Object ShortestPathResult<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class ShortestPathResult<T, W> where W : IComparable Type Parameters Name Description T W Constructors ShortestPathResult(List<T>, W) Declaration public ShortestPathResult(List<T> path, W length) Parameters Type Name Description List <T> path W length Properties Length Declaration public W Length { get; } Property Value Type Description W Path Declaration public List<T> Path { get; } Property Value Type Description List <T>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.TopologicalSort.DepthFirstTopSort-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.TopologicalSort.DepthFirstTopSort-1.html",
    "title": "Class DepthFirstTopSort<T> | Advanced Algorithms",
    "keywords": "Class DepthFirstTopSort<T> Find Toplogical order of a graph using Depth First Search Inheritance Object DepthFirstTopSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.TopologicalSort Assembly : Advanced.Algorithms.dll Syntax public class DepthFirstTopSort<T> Type Parameters Name Description T Methods GetTopSort(DiGraph<T>) Returns the vertices in Topologically Sorted Order Declaration public List<T> GetTopSort(DiGraph<T> graph) Parameters Type Name Description DiGraph <T> graph Returns Type Description List <T>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.TopologicalSort.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.TopologicalSort.html",
    "title": "Namespace Advanced.Algorithms.GraphAlgorithms.TopologicalSort | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.GraphAlgorithms.TopologicalSort Classes DepthFirstTopSort<T> Find Toplogical order of a graph using Depth First Search KahnsTopSort<T> Find Toplogical order of a graph using Kahn's algorithm"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.TopologicalSort.KahnsTopSort-1.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.TopologicalSort.KahnsTopSort-1.html",
    "title": "Class KahnsTopSort<T> | Advanced Algorithms",
    "keywords": "Class KahnsTopSort<T> Find Toplogical order of a graph using Kahn's algorithm Inheritance Object KahnsTopSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms.TopologicalSort Assembly : Advanced.Algorithms.dll Syntax public class KahnsTopSort<T> Type Parameters Name Description T Methods GetTopSort(DiGraph<T>) Returns the vertices in Topologically Sorted Order Declaration public List<T> GetTopSort(DiGraph<T> graph) Parameters Type Name Description DiGraph <T> graph Returns Type Description List <T>"
  },
  "api/Advanced.Algorithms.GraphAlgorithms.TravellingSalesman.html": {
    "href": "api/Advanced.Algorithms.GraphAlgorithms.TravellingSalesman.html",
    "title": "Class TravellingSalesman | Advanced Algorithms",
    "keywords": "Class TravellingSalesman Problem details below https://en.wikipedia.org/wiki/Travelling_salesman_problem Uses dynamic programming and have psuedo-polynomial time runtime complexity for this NP hard problem Inheritance Object TravellingSalesman Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.GraphAlgorithms Assembly : Advanced.Algorithms.dll Syntax public class TravellingSalesman Methods GetMinWeight(WeightedDiGraph<Int32, Int32>) Declaration public static int GetMinWeight(WeightedDiGraph<int, int> graph) Parameters Type Name Description WeightedDiGraph < Int32 , Int32 > graph Returns Type Description Int32 GetMinWeight(WeightedDiGraphVertex<Int32, Int32>, WeightedDiGraphVertex<Int32, Int32>, Int32, HashSet<WeightedDiGraphVertex<Int32, Int32>>, Dictionary<String, Int32>) Declaration public static int GetMinWeight(WeightedDiGraphVertex<int, int> currentVertex, WeightedDiGraphVertex<int, int> tgtVertex, int remainingVertexCount, HashSet<WeightedDiGraphVertex<int, int>> visited, Dictionary<string, int> cache) Parameters Type Name Description WeightedDiGraphVertex < Int32 , Int32 > currentVertex WeightedDiGraphVertex < Int32 , Int32 > tgtVertex Int32 remainingVertexCount HashSet < WeightedDiGraphVertex < Int32 , Int32 >> visited Dictionary < String , Int32 > cache Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Miscellaneous.html": {
    "href": "api/Advanced.Algorithms.Miscellaneous.html",
    "title": "Namespace Advanced.Algorithms.Miscellaneous | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Miscellaneous Classes MatrixMultiplication"
  },
  "api/Advanced.Algorithms.Miscellaneous.MatrixMultiplication.html": {
    "href": "api/Advanced.Algorithms.Miscellaneous.MatrixMultiplication.html",
    "title": "Class MatrixMultiplication | Advanced Algorithms",
    "keywords": "Class MatrixMultiplication Inheritance Object MatrixMultiplication Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Miscellaneous Assembly : Advanced.Algorithms.dll Syntax public class MatrixMultiplication"
  },
  "api/Advanced.Algorithms.NumericalMethods.FastExponentiation.html": {
    "href": "api/Advanced.Algorithms.NumericalMethods.FastExponentiation.html",
    "title": "Class FastExponentiation | Advanced Algorithms",
    "keywords": "Class FastExponentiation Inheritance Object FastExponentiation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.NumericalMethods Assembly : Advanced.Algorithms.dll Syntax public class FastExponentiation Methods BySquaring(Int32, Int32) Computes exponentiation using squaring Declaration public static int BySquaring(int base, int power) Parameters Type Name Description Int32 base Int32 power Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.NumericalMethods.html": {
    "href": "api/Advanced.Algorithms.NumericalMethods.html",
    "title": "Namespace Advanced.Algorithms.NumericalMethods | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.NumericalMethods Classes FastExponentiation KthSmallest<T> Returns the kth smallest element in given input MedianStream Keeps median of given stream An online algorithm PrimeGenerator PrimeTester Tests for Prime in School method optimized"
  },
  "api/Advanced.Algorithms.NumericalMethods.KthSmallest-1.html": {
    "href": "api/Advanced.Algorithms.NumericalMethods.KthSmallest-1.html",
    "title": "Class KthSmallest<T> | Advanced Algorithms",
    "keywords": "Class KthSmallest<T> Returns the kth smallest element in given input Inheritance Object KthSmallest<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.NumericalMethods Assembly : Advanced.Algorithms.dll Syntax public class KthSmallest<T> where T : IComparable Type Parameters Name Description T Methods FindKthSmallest(T[], Int32) Declaration public T FindKthSmallest(T[] input, int k) Parameters Type Name Description T[] input Int32 k Returns Type Description T"
  },
  "api/Advanced.Algorithms.NumericalMethods.MedianStream.html": {
    "href": "api/Advanced.Algorithms.NumericalMethods.MedianStream.html",
    "title": "Class MedianStream | Advanced Algorithms",
    "keywords": "Class MedianStream Keeps median of given stream An online algorithm Inheritance Object MedianStream Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.NumericalMethods Assembly : Advanced.Algorithms.dll Syntax public class MedianStream Methods Add(Int32) Add a new item to stream Declaration public void Add(int newValue) Parameters Type Name Description Int32 newValue GetMedian() Returns the current median Declaration public int GetMedian() Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.NumericalMethods.PrimeGenerator.html": {
    "href": "api/Advanced.Algorithms.NumericalMethods.PrimeGenerator.html",
    "title": "Class PrimeGenerator | Advanced Algorithms",
    "keywords": "Class PrimeGenerator Inheritance Object PrimeGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.NumericalMethods Assembly : Advanced.Algorithms.dll Syntax public class PrimeGenerator Methods GetAllPrimes(Int32) Prime generation using Sieve of Eratosthenes Declaration public static List<int> GetAllPrimes(int max) Parameters Type Name Description Int32 max Returns Type Description List < Int32 >"
  },
  "api/Advanced.Algorithms.NumericalMethods.PrimeTester.html": {
    "href": "api/Advanced.Algorithms.NumericalMethods.PrimeTester.html",
    "title": "Class PrimeTester | Advanced Algorithms",
    "keywords": "Class PrimeTester Tests for Prime in School method optimized Inheritance Object PrimeTester Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.NumericalMethods Assembly : Advanced.Algorithms.dll Syntax public class PrimeTester Methods IsPrime(Int32) Check if given number is prime Declaration public static bool IsPrime(int number) Parameters Type Name Description Int32 number Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Search.BinarySearch.html": {
    "href": "api/Advanced.Algorithms.Search.BinarySearch.html",
    "title": "Class BinarySearch | Advanced Algorithms",
    "keywords": "Class BinarySearch Inheritance Object BinarySearch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class BinarySearch Methods Search(Int32[], Int32) Declaration public static int Search(int[] input, int element) Parameters Type Name Description Int32 [] input Int32 element Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Search.html": {
    "href": "api/Advanced.Algorithms.Search.html",
    "title": "Namespace Advanced.Algorithms.Search | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Search Classes BinarySearch SearchAlmostSorted"
  },
  "api/Advanced.Algorithms.Search.SearchAlmostSorted.html": {
    "href": "api/Advanced.Algorithms.Search.SearchAlmostSorted.html",
    "title": "Class SearchAlmostSorted | Advanced Algorithms",
    "keywords": "Class SearchAlmostSorted Inheritance Object SearchAlmostSorted Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class SearchAlmostSorted Methods Search(Int32[], Int32) Declaration public static int Search(int[] input, int element) Parameters Type Name Description Int32 [] input Int32 element Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Sorting.BubbleSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.BubbleSort-1.html",
    "title": "Class BubbleSort<T> | Advanced Algorithms",
    "keywords": "Class BubbleSort<T> Inheritance Object BubbleSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class BubbleSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.BucketSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.BucketSort.html",
    "title": "Class BucketSort | Advanced Algorithms",
    "keywords": "Class BucketSort A bucket sort implementation Inheritance Object BucketSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class BucketSort Methods Sort(Int32[], Int32) Sort given integers using bucket sort with merge sort as sub sort Declaration public static int[] Sort(int[] array, int bucketSize) Parameters Type Name Description Int32 [] array Int32 bucketSize Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.CountingSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.CountingSort.html",
    "title": "Class CountingSort | Advanced Algorithms",
    "keywords": "Class CountingSort A counting sort implementation Inheritance Object CountingSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class CountingSort Methods Sort(Int32[]) Sort given integers Declaration public static int[] Sort(int[] array) Parameters Type Name Description Int32 [] array Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.HeapSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.HeapSort-1.html",
    "title": "Class HeapSort<T> | Advanced Algorithms",
    "keywords": "Class HeapSort<T> Inheritance Object HeapSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class HeapSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.html": {
    "href": "api/Advanced.Algorithms.Sorting.html",
    "title": "Namespace Advanced.Algorithms.Sorting | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Sorting Classes BubbleSort<T> BucketSort A bucket sort implementation CountingSort A counting sort implementation HeapSort<T> InsertionSort<T> MergeSort<T> QuickSort<T> RadixSort A radix sort implementation SelectionSort<T> ShellSort<T> A shell sort implementation SortAlmostSorted TreeSort<T>"
  },
  "api/Advanced.Algorithms.Sorting.InsertionSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.InsertionSort-1.html",
    "title": "Class InsertionSort<T> | Advanced Algorithms",
    "keywords": "Class InsertionSort<T> Inheritance Object InsertionSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class InsertionSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.MergeSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.MergeSort-1.html",
    "title": "Class MergeSort<T> | Advanced Algorithms",
    "keywords": "Class MergeSort<T> Inheritance Object MergeSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class MergeSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.QuickSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.QuickSort-1.html",
    "title": "Class QuickSort<T> | Advanced Algorithms",
    "keywords": "Class QuickSort<T> Inheritance Object QuickSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class QuickSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.RadixSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.RadixSort.html",
    "title": "Class RadixSort | Advanced Algorithms",
    "keywords": "Class RadixSort A radix sort implementation Inheritance Object RadixSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class RadixSort Methods Sort(Int32[]) Sort given integers Declaration public static int[] Sort(int[] array) Parameters Type Name Description Int32 [] array Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.SelectionSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.SelectionSort-1.html",
    "title": "Class SelectionSort<T> | Advanced Algorithms",
    "keywords": "Class SelectionSort<T> Inheritance Object SelectionSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class SelectionSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.ShellSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.ShellSort-1.html",
    "title": "Class ShellSort<T> | Advanced Algorithms",
    "keywords": "Class ShellSort<T> A shell sort implementation Inheritance Object ShellSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class ShellSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[]) Sort given integers Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.SortAlmostSorted.html": {
    "href": "api/Advanced.Algorithms.Sorting.SortAlmostSorted.html",
    "title": "Class SortAlmostSorted | Advanced Algorithms",
    "keywords": "Class SortAlmostSorted Inheritance Object SortAlmostSorted Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class SortAlmostSorted Methods Sort(Int32[], Int32) Sort the given input where elements are misplaced almost by a distance k Declaration public static int[] Sort(int[] input, int k) Parameters Type Name Description Int32 [] input Int32 k Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.TreeSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.TreeSort-1.html",
    "title": "Class TreeSort<T> | Advanced Algorithms",
    "keywords": "Class TreeSort<T> Inheritance Object TreeSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class TreeSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.String.html": {
    "href": "api/Advanced.Algorithms.String.html",
    "title": "Namespace Advanced.Algorithms.String | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.String Classes ManachersPalindrome A Manacher's longest palindrome implementation"
  },
  "api/Advanced.Algorithms.String.ManachersPalindrome.html": {
    "href": "api/Advanced.Algorithms.String.ManachersPalindrome.html",
    "title": "Class ManachersPalindrome | Advanced Algorithms",
    "keywords": "Class ManachersPalindrome A Manacher's longest palindrome implementation Inheritance Object ManachersPalindrome Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class ManachersPalindrome Methods FindLongestPalindrome(String) Declaration public int FindLongestPalindrome(string input) Parameters Type Name Description String input Returns Type Description Int32 FindLongestPalindromeR(String) Find the longest palindrome in linear time Declaration public int FindLongestPalindromeR(string input) Parameters Type Name Description String input Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.String.Search.html": {
    "href": "api/Advanced.Algorithms.String.Search.html",
    "title": "Namespace Advanced.Algorithms.String.Search | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.String.Search Classes KMP Knuth–Morris–Pratt(KMP) search implementation RabinKarp ZAlgorithm"
  },
  "api/Advanced.Algorithms.String.Search.KMP.html": {
    "href": "api/Advanced.Algorithms.String.Search.KMP.html",
    "title": "Class KMP | Advanced Algorithms",
    "keywords": "Class KMP Knuth–Morris–Pratt(KMP) search implementation Inheritance Object KMP Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String.Search Assembly : Advanced.Algorithms.dll Syntax public class KMP Methods Search(String, String) Returns the start index of first appearance of pattern in input string returns -1 if no match Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.String.Search.RabinKarp.html": {
    "href": "api/Advanced.Algorithms.String.Search.RabinKarp.html",
    "title": "Class RabinKarp | Advanced Algorithms",
    "keywords": "Class RabinKarp Inheritance Object RabinKarp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String.Search Assembly : Advanced.Algorithms.dll Syntax public class RabinKarp Methods Search(String, String) Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.String.Search.ZAlgorithm.html": {
    "href": "api/Advanced.Algorithms.String.Search.ZAlgorithm.html",
    "title": "Class ZAlgorithm | Advanced Algorithms",
    "keywords": "Class ZAlgorithm Inheritance Object ZAlgorithm Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String.Search Assembly : Advanced.Algorithms.dll Syntax public class ZAlgorithm Methods Search(String, String) Returns the start index of first appearance of pattern in input string returns -1 if no match Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  }
}
