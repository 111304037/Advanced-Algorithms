{
  "api/Advanced.Algorithms.DataStructures.TreeHashSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreeHashSet-1.html",
    "title": "Class TreeHashSet<V> | Advanced Algorithms",
    "keywords": "Class TreeHashSet<V> A HashSet implementation using balanced binary search tree (log(n) operations in worst case) This may be better than regular HashSet implementation which can give o(K) in worst case (but O(1) when collisions K is avoided ) Inheritance Object TreeHashSet<V> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreeHashSet<V> where V : IComparable Type Parameters Name Description V Constructors | Improve this Doc View Source TreeHashSet() Declaration public TreeHashSet() Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(V) Declaration public void Add(V value) Parameters Type Name Description V value | Improve this Doc View Source Contains(V) Declaration public bool Contains(V value) Parameters Type Name Description V value Returns Type Description Boolean | Improve this Doc View Source GetAll() Declaration public ArrayList<V> GetAll() Returns Type Description ArrayList <V> | Improve this Doc View Source Remove(V) Declaration public void Remove(V value) Parameters Type Name Description V value"
  },
  "api/Advanced.Algorithms.DataStructures.TreeDictionaryNode-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreeDictionaryNode-2.html",
    "title": "Class TreeDictionaryNode<TK, TV> | Advanced Algorithms",
    "keywords": "Class TreeDictionaryNode<TK, TV> Inheritance Object TreeDictionaryNode<TK, TV> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreeDictionaryNode<TK, TV> : IComparable where TK : IComparable Type Parameters Name Description TK TV Constructors | Improve this Doc View Source TreeDictionaryNode(TK, TV) Declaration public TreeDictionaryNode(TK key, TV value) Parameters Type Name Description TK key TV value Properties | Improve this Doc View Source Key Declaration public TK Key { get; } Property Value Type Description TK | Improve this Doc View Source Value Declaration public TV Value { get; set; } Property Value Type Description TV Methods | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.D_aryMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.D_aryMinHeap-1.html",
    "title": "Class D_aryMinHeap<T> | Advanced Algorithms",
    "keywords": "Class D_aryMinHeap<T> Inheritance Object D_aryMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class D_aryMinHeap<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source D_aryMinHeap(Int32, IEnumerable<T>) Declaration public D_aryMinHeap(int k, IEnumerable<T> initial = null) Parameters Type Name Description Int32 k IEnumerable <T> initial Fields | Improve this Doc View Source Count Declaration public int Count Field Value Type Description Int32 Methods | Improve this Doc View Source ExtractMin() Declaration public T ExtractMin() Returns Type Description T | Improve this Doc View Source Insert(T) Declaration public void Insert(T newItem) Parameters Type Name Description T newItem | Improve this Doc View Source PeekMin() Declaration public T PeekMin() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.DisJointSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DisJointSet-1.html",
    "title": "Class DisJointSet<T> | Advanced Algorithms",
    "keywords": "Class DisJointSet<T> A disjoint set implementation Inheritance Object DisJointSet<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DisJointSet<T> Type Parameters Name Description T Methods | Improve this Doc View Source FindSet(T) Returns the reference member of the set where this member is part of Declaration public T FindSet(T member) Parameters Type Name Description T member Returns Type Description T | Improve this Doc View Source MakeSet(T) Creates a new set with given member Declaration public void MakeSet(T member) Parameters Type Name Description T member | Improve this Doc View Source Union(T, T) Union's their sets if given members are in differant sets Otherwise do nothing Declaration public void Union(T memberA, T memberB) Parameters Type Name Description T memberA T memberB"
  },
  "api/Advanced.Algorithms.DataStructures.Dictionary-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Dictionary-2.html",
    "title": "Class Dictionary<TK, TV> | Advanced Algorithms",
    "keywords": "Class Dictionary<TK, TV> A hash table implementation (key value dictionary) with separate chaining TODO improve performance by using a Prime number greater than total elements as Bucket Size Inheritance Object Dictionary<TK, TV> Implements IEnumerable < DictionaryNode <TK, TV>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Dictionary<TK, TV> : IEnumerable<DictionaryNode<TK, TV>>, IEnumerable Type Parameters Name Description TK TV Constructors | Improve this Doc View Source Dictionary(DictionaryType, Int32) Declaration public Dictionary(DictionaryType type = DictionaryType.SeparateChaining, int initialBucketSize = 2) Parameters Type Name Description DictionaryType type Int32 initialBucketSize Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[TK] Declaration public TV this[TK key] { get; set; } Parameters Type Name Description TK key Property Value Type Description TV Methods | Improve this Doc View Source Add(TK, TV) Declaration public void Add(TK key, TV value) Parameters Type Name Description TK key TV value | Improve this Doc View Source Clear() clear hash table Declaration public void Clear() | Improve this Doc View Source ContainsKey(TK) Declaration public bool ContainsKey(TK key) Parameters Type Name Description TK key Returns Type Description Boolean | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<DictionaryNode<TK, TV>> GetEnumerator() Returns Type Description IEnumerator < DictionaryNode <TK, TV>> | Improve this Doc View Source Remove(TK) Declaration public void Remove(TK key) Parameters Type Name Description TK key Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BST-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BST-1.html",
    "title": "Class BST<T> | Advanced Algorithms",
    "keywords": "Class BST<T> Inheritance Object BST<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BST<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source FindMax() Declaration public T FindMax() Returns Type Description T | Improve this Doc View Source FindMin() Declaration public T FindMin() Returns Type Description T | Improve this Doc View Source getHeight() Declaration public int getHeight() Returns Type Description Int32 | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.String.KMP.html": {
    "href": "api/Advanced.Algorithms.String.KMP.html",
    "title": "Class KMP | Advanced Algorithms",
    "keywords": "Class KMP Knuth–Morris–Pratt(KMP) search implementation Inheritance Object KMP Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class KMP Methods | Improve this Doc View Source Search(String, String) Returns the start index of first appearance of pattern in input string returns -1 if no match Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Sorting.html": {
    "href": "api/Advanced.Algorithms.Sorting.html",
    "title": "Namespace Advanced.Algorithms.Sorting | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Sorting Classes BubbleSort<T> BucketSort A bucket sort implementation CountingSort A counting sort implementation HeapSort<T> InsertionSort<T> MergeSort<T> QuickSort<T> RadixSort A radix sort implementation SelectionSort<T> ShellSort<T> A shell sort implementation SortAlmostSorted TreeSort<T>"
  },
  "api/Advanced.Algorithms.Miscellaneous.MatrixMultiplication.html": {
    "href": "api/Advanced.Algorithms.Miscellaneous.MatrixMultiplication.html",
    "title": "Class MatrixMultiplication | Advanced Algorithms",
    "keywords": "Class MatrixMultiplication Inheritance Object MatrixMultiplication Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Miscellaneous Assembly : Advanced.Algorithms.dll Syntax public class MatrixMultiplication Methods | Improve this Doc View Source Multiply(Int32[,], Int32[,]) Declaration public static int[, ] Multiply(int[, ] a, int[, ] b) Parameters Type Name Description Int32 [,] a Int32 [,] b Returns Type Description Int32 [,]"
  },
  "api/Advanced.Algorithms.Geometry.html": {
    "href": "api/Advanced.Algorithms.Geometry.html",
    "title": "Namespace Advanced.Algorithms.Geometry | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Geometry Classes ClosestPointPair ConvexHull Convex hull using jarvis's algorithm LineIntersection PointInsidePolygon PointRotation RectangleIntersection Structs Line Point Rectangle"
  },
  "api/Advanced.Algorithms.DataStructures.PairingMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.PairingMinHeap-1.html",
    "title": "Class PairingMinHeap<T> | Advanced Algorithms",
    "keywords": "Class PairingMinHeap<T> Inheritance Object PairingMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class PairingMinHeap<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source DecrementKey(PairingHeapNode<T>) Update heap after a node value was decremented Declaration public void DecrementKey(PairingHeapNode<T> node) Parameters Type Name Description PairingHeapNode <T> node | Improve this Doc View Source ExtractMin() Returns the min Declaration public T ExtractMin() Returns Type Description T | Improve this Doc View Source Insert(T) Insert a new Node Declaration public PairingHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description PairingHeapNode <T> | Improve this Doc View Source Merge(PairingMinHeap<T>) Merge another heap with this heap Declaration public void Merge(PairingMinHeap<T> PairingHeap) Parameters Type Name Description PairingMinHeap <T> PairingHeap | Improve this Doc View Source PeekMin() O(1) time complexity Declaration public T PeekMin() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.PairingMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.PairingMaxHeap-1.html",
    "title": "Class PairingMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class PairingMaxHeap<T> Inheritance Object PairingMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class PairingMaxHeap<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ExtractMax() Returns the max Declaration public T ExtractMax() Returns Type Description T | Improve this Doc View Source IncrementKey(PairingHeapNode<T>) Update heap after a node value was incremented Declaration public void IncrementKey(PairingHeapNode<T> node) Parameters Type Name Description PairingHeapNode <T> node | Improve this Doc View Source Insert(T) Insert a new Node Declaration public PairingHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description PairingHeapNode <T> | Improve this Doc View Source Merge(PairingMaxHeap<T>) Merge another heap with this heap Declaration public void Merge(PairingMaxHeap<T> pairingHeap) Parameters Type Name Description PairingMaxHeap <T> pairingHeap | Improve this Doc View Source PeekMax() O(1) time complexity Declaration public T PeekMax() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.FibornacciMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.FibornacciMinHeap-1.html",
    "title": "Class FibornacciMinHeap<T> | Advanced Algorithms",
    "keywords": "Class FibornacciMinHeap<T> Inheritance Object FibornacciMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class FibornacciMinHeap<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source DecrementKey(FibornacciHeapNode<T>) Update the Heap with new value for this node pointer O(1) complexity amortized Declaration public void DecrementKey(FibornacciHeapNode<T> node) Parameters Type Name Description FibornacciHeapNode <T> node | Improve this Doc View Source ExtractMin() O(log(n)) complexity Declaration public T ExtractMin() Returns Type Description T | Improve this Doc View Source Insert(T) O(1) complexity amortized Declaration public FibornacciHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description FibornacciHeapNode <T> | Improve this Doc View Source PeekMin() Declaration public T PeekMin() Returns Type Description T | Improve this Doc View Source Union(FibornacciMinHeap<T>) Unions this heap with another O(k) complexity where K is the FibornacciHeap Forest Length Declaration public void Union(FibornacciMinHeap<T> FibornacciHeap) Parameters Type Name Description FibornacciMinHeap <T> FibornacciHeap"
  },
  "api/Advanced.Algorithms.DataStructures.SparseSet.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SparseSet.html",
    "title": "Class SparseSet | Advanced Algorithms",
    "keywords": "Class SparseSet Inheritance Object SparseSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SparseSet Constructors | Improve this Doc View Source SparseSet(Int32, Int32) Declaration public SparseSet(int maxVal, int capacity) Parameters Type Name Description Int32 maxVal Int32 capacity Properties | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(Int32) Declaration public void Add(int value) Parameters Type Name Description Int32 value | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source HasItem(Int32) Declaration public bool HasItem(int value) Parameters Type Name Description Int32 value Returns Type Description Boolean | Improve this Doc View Source Remove(Int32) Declaration public void Remove(int value) Parameters Type Name Description Int32 value"
  },
  "api/Advanced.Algorithms.DataStructures.SkipList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SkipList-1.html",
    "title": "Class SkipList<T> | Advanced Algorithms",
    "keywords": "Class SkipList<T> Inheritance Object SkipList<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SkipList<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source SkipList(Int32) Declaration public SkipList(int maxHeight = 32) Parameters Type Name Description Int32 maxHeight Properties | Improve this Doc View Source MaxHeight Declaration public int MaxHeight { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source Find(T) Declaration public T Find(T value) Parameters Type Name Description T value Returns Type Description T | Improve this Doc View Source Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.QueueType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.QueueType.html",
    "title": "Enum QueueType | Advanced Algorithms",
    "keywords": "Enum QueueType Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public enum QueueType Fields Name Description Array LinkedList"
  },
  "api/Advanced.Algorithms.DataStructures.Queue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Queue-1.html",
    "title": "Class Queue<T> | Advanced Algorithms",
    "keywords": "Class Queue<T> Inheritance Object Queue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Queue<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Queue(QueueType) Declaration public Queue(QueueType type = QueueType.Array) Parameters Type Name Description QueueType type Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dequeue() Declaration public T Dequeue() Returns Type Description T | Improve this Doc View Source Enqueue(T) Declaration public void Enqueue(T item) Parameters Type Name Description T item"
  },
  "api/Advanced.Algorithms.Geometry.RectangleIntersection.html": {
    "href": "api/Advanced.Algorithms.Geometry.RectangleIntersection.html",
    "title": "Class RectangleIntersection | Advanced Algorithms",
    "keywords": "Class RectangleIntersection Inheritance Object RectangleIntersection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class RectangleIntersection Methods | Improve this Doc View Source FindIntersection(Rectangle, Rectangle) Returns the rectangle formed by the intersection if do intersect Otherwise default value of Rectangle struct Declaration public static Rectangle FindIntersection(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a Rectangle b Returns Type Description Rectangle"
  },
  "api/Advanced.Algorithms.Geometry.Rectangle.html": {
    "href": "api/Advanced.Algorithms.Geometry.Rectangle.html",
    "title": "Struct Rectangle | Advanced Algorithms",
    "keywords": "Struct Rectangle Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public struct Rectangle Properties | Improve this Doc View Source LeftTopCorner Declaration public Point LeftTopCorner { get; set; } Property Value Type Description Point | Improve this Doc View Source RightBottomCorner Declaration public Point RightBottomCorner { get; set; } Property Value Type Description Point"
  },
  "api/Advanced.Algorithms.Geometry.PointRotation.html": {
    "href": "api/Advanced.Algorithms.Geometry.PointRotation.html",
    "title": "Class PointRotation | Advanced Algorithms",
    "keywords": "Class PointRotation Inheritance Object PointRotation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class PointRotation Methods | Improve this Doc View Source Rotate(Point, Point, Int32) Declaration public static Point Rotate(Point center, Point point, int angle) Parameters Type Name Description Point center Point point Int32 angle Returns Type Description Point"
  },
  "api/Advanced.Algorithms.Geometry.PointInsidePolygon.html": {
    "href": "api/Advanced.Algorithms.Geometry.PointInsidePolygon.html",
    "title": "Class PointInsidePolygon | Advanced Algorithms",
    "keywords": "Class PointInsidePolygon Inheritance Object PointInsidePolygon Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class PointInsidePolygon Methods | Improve this Doc View Source IsInside(List<Int32[]>, Int32[]) Declaration public static bool IsInside(List<int[]> polygonEdgePoints, int[] testPoint) Parameters Type Name Description List < Int32 []> polygonEdgePoints Int32 [] testPoint Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.DataStructures.Trie-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Trie-1.html",
    "title": "Class Trie<T> | Advanced Algorithms",
    "keywords": "Class Trie<T> Inheritance Object Trie<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Trie<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Trie() Declaration public Trie() Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Contains(T[]) returns true if the entry exist Declaration public bool Contains(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean | Improve this Doc View Source Delete(T[]) deletes a record from this trie O(m) where m is the length of entry Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry | Improve this Doc View Source Insert(T[]) Insert a new record to this trie O(m) time complexity where m is the length of entry Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry | Improve this Doc View Source StartsWith(T[]) returns a list of records matching this prefix Declaration public List<T[]> StartsWith(T[] prefix) Parameters Type Name Description T[] prefix Returns Type Description List <T[]>"
  },
  "api/Advanced.Algorithms.DataStructures.TreeNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreeNode-1.html",
    "title": "Class TreeNode<T> | Advanced Algorithms",
    "keywords": "Class TreeNode<T> Inheritance Object TreeNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreeNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source TreeNode(TreeNode<T>, T) Declaration public TreeNode(TreeNode<T> parent, T value) Parameters Type Name Description TreeNode <T> parent T value Properties | Improve this Doc View Source Children Declaration public SinglyLinkedList<TreeNode<T>> Children { get; set; } Property Value Type Description SinglyLinkedList < TreeNode <T>> | Improve this Doc View Source IsLeaf Declaration public bool IsLeaf { get; } Property Value Type Description Boolean | Improve this Doc View Source Parent Declaration public TreeNode<T> Parent { get; set; } Property Value Type Description TreeNode <T> | Improve this Doc View Source Value Declaration public T Value { get; set; } Property Value Type Description T Methods | Improve this Doc View Source CompareTo(TreeNode<T>) Declaration public int CompareTo(TreeNode<T> treeNode) Parameters Type Name Description TreeNode <T> treeNode Returns Type Description Int32 | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.SuffixTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SuffixTree-1.html",
    "title": "Class SuffixTree<T> | Advanced Algorithms",
    "keywords": "Class SuffixTree<T> A simple suffix tree implementation using a trie Inheritance Object SuffixTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SuffixTree<T> Type Parameters Name Description T Constructors | Improve this Doc View Source SuffixTree() Declaration public SuffixTree() Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ContainsPattern(T[]) returns if the entry pattern is in this suffix tree Declaration public bool ContainsPattern(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean | Improve this Doc View Source Delete(T[]) deletes an entry from this suffix tree O(m^2) complexity if m is the length of the entry to be deleted Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry | Improve this Doc View Source Insert(T[]) insert a new entry to suffix tree O(m^2) complexity if m is the length of entry array Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry | Improve this Doc View Source StartsWithPattern(T[]) returns all sub entries that starts with this search pattern Declaration public List<T[]> StartsWithPattern(T[] entry) Parameters Type Name Description T[] entry Returns Type Description List <T[]>"
  },
  "api/Advanced.Algorithms.DataStructures.StackType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.StackType.html",
    "title": "Enum StackType | Advanced Algorithms",
    "keywords": "Enum StackType Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public enum StackType Fields Name Description Array LinkedList"
  },
  "api/Advanced.Algorithms.DataStructures.DInterval-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DInterval-1.html",
    "title": "Class DInterval<T> | Advanced Algorithms",
    "keywords": "Class DInterval<T> An interval object to represent multi-dimensional intervals Inheritance Object DInterval<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DInterval<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source DInterval(T[], T[]) Declaration public DInterval(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Properties | Improve this Doc View Source End Declaration public T[] End { get; set; } Property Value Type Description T[] | Improve this Doc View Source Start Declaration public T[] Start { get; set; } Property Value Type Description T[]"
  },
  "api/Advanced.Algorithms.DataStructures.CircularLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.CircularLinkedListNode-1.html",
    "title": "Class CircularLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class CircularLinkedListNode<T> Inheritance Object CircularLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class CircularLinkedListNode<T> Type Parameters Name Description T Constructors | Improve this Doc View Source CircularLinkedListNode(T) Declaration public CircularLinkedListNode(T data) Parameters Type Name Description T data Fields | Improve this Doc View Source Data Declaration public T Data Field Value Type Description T | Improve this Doc View Source Next Declaration public CircularLinkedListNode<T> Next Field Value Type Description CircularLinkedListNode <T> | Improve this Doc View Source Prev Declaration public CircularLinkedListNode<T> Prev Field Value Type Description CircularLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.BTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BTree-1.html",
    "title": "Class BTree<T> | Advanced Algorithms",
    "keywords": "Class BTree<T> Inheritance Object BTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BTree<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source BTree(Int32) Declaration public BTree(int maxKeysPerNode) Parameters Type Name Description Int32 maxKeysPerNode Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Max Declaration public T Max { get; } Property Value Type Description T | Improve this Doc View Source Min Declaration public T Min { get; } Property Value Type Description T Methods | Improve this Doc View Source Delete(T) Delete the given value from this BTree Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T) Inserts and element to B-Tree Declaration public void Insert(T newValue) Parameters Type Name Description T newValue"
  },
  "api/Advanced.Algorithms.DataStructures.BMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BMinHeap-1.html",
    "title": "Class BMinHeap<T> | Advanced Algorithms",
    "keywords": "Class BMinHeap<T> Inheritance Object BMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BMinHeap<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source BMinHeap(IEnumerable<T>) Initialize with optional init value Declaration public BMinHeap(IEnumerable<T> initial = null) Parameters Type Name Description IEnumerable <T> initial Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ExtractMin() Declaration public T ExtractMin() Returns Type Description T | Improve this Doc View Source Insert(T) Declaration public void Insert(T newItem) Parameters Type Name Description T newItem | Improve this Doc View Source PeekMin() Declaration public T PeekMin() Returns Type Description T"
  },
  "api/Advanced.Algorithms.Sorting.MergeSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.MergeSort-1.html",
    "title": "Class MergeSort<T> | Advanced Algorithms",
    "keywords": "Class MergeSort<T> Inheritance Object MergeSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class MergeSort<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.InsertionSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.InsertionSort-1.html",
    "title": "Class InsertionSort<T> | Advanced Algorithms",
    "keywords": "Class InsertionSort<T> Inheritance Object InsertionSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class InsertionSort<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.HeapSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.HeapSort-1.html",
    "title": "Class HeapSort<T> | Advanced Algorithms",
    "keywords": "Class HeapSort<T> Inheritance Object HeapSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class HeapSort<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.CountingSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.CountingSort.html",
    "title": "Class CountingSort | Advanced Algorithms",
    "keywords": "Class CountingSort A counting sort implementation Inheritance Object CountingSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class CountingSort Methods | Improve this Doc View Source Sort(Int32[]) Sort given integers Declaration public static int[] Sort(int[] array) Parameters Type Name Description Int32 [] array Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraph-2.html",
    "title": "Class WeightedGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedGraph<T, TW> A weighted graph implementation Inheritance Object WeightedGraph<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedGraph<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors | Improve this Doc View Source WeightedGraph() Constructor Declaration public WeightedGraph() Properties | Improve this Doc View Source ReferenceVertex return a reference vertex to start traversing Vertices O(1) complexity Declaration public WeightedGraphVertex<T, TW> ReferenceVertex { get; } Property Value Type Description WeightedGraphVertex <T, TW> | Improve this Doc View Source VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddEdge(T, T, TW) Add a new edge to this graph with given weight and between given source and destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight | Improve this Doc View Source AddVertex(T) Add a new vertex to this graph O(1) complexity Declaration public WeightedGraphVertex<T, TW> AddVertex(T value) Parameters Type Name Description T value Returns Type Description WeightedGraphVertex <T, TW> | Improve this Doc View Source FindVertex(T) Find the Vertex with given value O(1) complexity Declaration public WeightedGraphVertex<T, TW> FindVertex(T value) Parameters Type Name Description T value Returns Type Description WeightedGraphVertex <T, TW> | Improve this Doc View Source GetAllEdges(T) Declaration public List<Tuple<T, TW>> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> | Improve this Doc View Source HasEdge(T, T) Do we have an edge between given source and destination O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean | Improve this Doc View Source RemoveEdge(T, T) Remove given edge O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source RemoveVertex(T) remove given vertex from this graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraphVertex-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraphVertex-2.html",
    "title": "Class WeightedDiGraphVertex<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedDiGraphVertex<T, TW> A weighted graph vertex Inheritance Object WeightedDiGraphVertex<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedDiGraphVertex<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors | Improve this Doc View Source WeightedDiGraphVertex(T) Declaration public WeightedDiGraphVertex(T value) Parameters Type Name Description T value Properties | Improve this Doc View Source InEdges Declaration public Dictionary<WeightedDiGraphVertex<T, TW>, TW> InEdges { get; set; } Property Value Type Description Dictionary < WeightedDiGraphVertex <T, TW>, TW> | Improve this Doc View Source OutEdges Declaration public Dictionary<WeightedDiGraphVertex<T, TW>, TW> OutEdges { get; set; } Property Value Type Description Dictionary < WeightedDiGraphVertex <T, TW>, TW> | Improve this Doc View Source Value Declaration public T Value { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.FibornacciMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.FibornacciMaxHeap-1.html",
    "title": "Class FibornacciMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class FibornacciMaxHeap<T> Inheritance Object FibornacciMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class FibornacciMaxHeap<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ExtractMax() O(log(n)) complexity Declaration public T ExtractMax() Returns Type Description T | Improve this Doc View Source IncrementKey(FibornacciHeapNode<T>) Update the Heap with new value for this node pointer O(1) complexity amortized Declaration public void IncrementKey(FibornacciHeapNode<T> node) Parameters Type Name Description FibornacciHeapNode <T> node | Improve this Doc View Source Insert(T) O(1) complexity amortized Declaration public FibornacciHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description FibornacciHeapNode <T> | Improve this Doc View Source PeekMax() Declaration public T PeekMax() Returns Type Description T | Improve this Doc View Source Union(FibornacciMaxHeap<T>) Unions this heap with another O(k) complexity where K is the FibornacciHeap Forest Length Declaration public void Union(FibornacciMaxHeap<T> fibornacciHeap) Parameters Type Name Description FibornacciMaxHeap <T> fibornacciHeap"
  },
  "api/Advanced.Algorithms.DataStructures.FibornacciHeapNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.FibornacciHeapNode-1.html",
    "title": "Class FibornacciHeapNode<T> | Advanced Algorithms",
    "keywords": "Class FibornacciHeapNode<T> Inheritance Object FibornacciHeapNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class FibornacciHeapNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source FibornacciHeapNode(T) Declaration public FibornacciHeapNode(T value) Parameters Type Name Description T value Methods | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.Sorting.TreeSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.TreeSort-1.html",
    "title": "Class TreeSort<T> | Advanced Algorithms",
    "keywords": "Class TreeSort<T> Inheritance Object TreeSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class TreeSort<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.BucketSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.BucketSort.html",
    "title": "Class BucketSort | Advanced Algorithms",
    "keywords": "Class BucketSort A bucket sort implementation Inheritance Object BucketSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class BucketSort Methods | Improve this Doc View Source Sort(Int32[], Int32) Sort given integers using bucket sort with merge sort as sub sort Declaration public static int[] Sort(int[] array, int bucketSize) Parameters Type Name Description Int32 [] array Int32 bucketSize Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.BubbleSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.BubbleSort-1.html",
    "title": "Class BubbleSort<T> | Advanced Algorithms",
    "keywords": "Class BubbleSort<T> Inheritance Object BubbleSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class BubbleSort<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Search.html": {
    "href": "api/Advanced.Algorithms.Search.html",
    "title": "Namespace Advanced.Algorithms.Search | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Search Classes BinarySearch SearchAlmostSorted"
  },
  "api/Advanced.Algorithms.Search.SearchAlmostSorted.html": {
    "href": "api/Advanced.Algorithms.Search.SearchAlmostSorted.html",
    "title": "Class SearchAlmostSorted | Advanced Algorithms",
    "keywords": "Class SearchAlmostSorted Inheritance Object SearchAlmostSorted Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class SearchAlmostSorted Methods | Improve this Doc View Source Search(Int32[], Int32) Declaration public static int Search(int[] input, int element) Parameters Type Name Description Int32 [] input Int32 element Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.DataStructures.MaxPriorityQueue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.MaxPriorityQueue-1.html",
    "title": "Class MaxPriorityQueue<T> | Advanced Algorithms",
    "keywords": "Class MaxPriorityQueue<T> Inheritance Object MaxPriorityQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class MaxPriorityQueue<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Dequeue() Declaration public T Dequeue() Returns Type Description T | Improve this Doc View Source Enqueue(T) Declaration public void Enqueue(T queueItem) Parameters Type Name Description T queueItem"
  },
  "api/Advanced.Algorithms.DataStructures.KDTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.KDTree-1.html",
    "title": "Class KDTree<T> | Advanced Algorithms",
    "keywords": "Class KDTree<T> A multiDimensional Kd tree implementation (Unbalanced) Inheritance Object KDTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class KDTree<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source KDTree(Int32) Declaration public KDTree(int dimensions) Parameters Type Name Description Int32 dimensions Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T[]) delete point Declaration public void Delete(T[] point) Parameters Type Name Description T[] point | Improve this Doc View Source FindNearestNeighbour(IDistanceCalculator<T>, T[]) returns the nearest neigbour to point Declaration public T[] FindNearestNeighbour(IDistanceCalculator<T> distanceCalculator, T[] point) Parameters Type Name Description IDistanceCalculator <T> distanceCalculator T[] point Returns Type Description T[] | Improve this Doc View Source GetInRange(T[], T[]) returns a list of nodes that are withing the given area start and end ranges Declaration public List<T[]> GetInRange(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List <T[]> | Improve this Doc View Source Insert(T[]) Inserts a new item to this Kd tree Declaration public void Insert(T[] point) Parameters Type Name Description T[] point"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedGraph-2.html",
    "title": "Class WeightedGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedGraph<T, TW> A weighted graph implementation using dynamically growinng/shrinking adjacency matrix array Inheritance Object WeightedGraph<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class WeightedGraph<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors | Improve this Doc View Source WeightedGraph() Constructor Declaration public WeightedGraph() Properties | Improve this Doc View Source VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddEdge(T, T, TW) Add a new edge to this graph with given weight and between given source and destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight | Improve this Doc View Source AddVertex(T) Add a new vertex to this graph O(1) complexity Declaration public void AddVertex(T value) Parameters Type Name Description T value | Improve this Doc View Source GetAllEdges(T) Declaration public List<Tuple<T, TW>> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> | Improve this Doc View Source HasEdge(T, T) Do we have an edge between given source and destination O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean | Improve this Doc View Source RemoveEdge(T, T) Remove given edge O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source RemoveVertex(T) remove given vertex from this graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedDiGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedDiGraph-2.html",
    "title": "Class WeightedDiGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedDiGraph<T, TW> A weighted graph implementation using dynamically growinng/shrinking adjacency matrix array Inheritance Object WeightedDiGraph<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class WeightedDiGraph<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors | Improve this Doc View Source WeightedDiGraph() Constructor Declaration public WeightedDiGraph() Properties | Improve this Doc View Source VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddEdge(T, T, TW) Add a new edge to this graph O(1) complexity Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight | Improve this Doc View Source AddVertex(T) Add a new vertex to this graph O(1) complexity Declaration public void AddVertex(T value) Parameters Type Name Description T value | Improve this Doc View Source GetAllInEdges(T) Declaration public List<Tuple<T, TW>> GetAllInEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> | Improve this Doc View Source GetAllOutEdges(T) Declaration public List<Tuple<T, TW>> GetAllOutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> | Improve this Doc View Source HasEdge(T, T) do we have an edge between given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean | Improve this Doc View Source RemoveEdge(T, T) remove the given edge from this graph O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source RemoveVertex(T) remove the given vertex O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.SeparateChainingHashSetEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SeparateChainingHashSetEnumerator-1.html",
    "title": "Class SeparateChainingHashSetEnumerator<TV> | Advanced Algorithms",
    "keywords": "Class SeparateChainingHashSetEnumerator<TV> Inheritance Object SeparateChainingHashSetEnumerator<TV> Implements IEnumerator < HashSetNode <TV>> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SeparateChainingHashSetEnumerator<TV> : IEnumerator<HashSetNode<TV>>, IDisposable, IEnumerator Type Parameters Name Description TV Properties | Improve this Doc View Source Current Declaration public HashSetNode<TV> Current { get; } Property Value Type Description HashSetNode <TV> Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.SeparateChainingDictionaryEnumerator-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SeparateChainingDictionaryEnumerator-2.html",
    "title": "Class SeparateChainingDictionaryEnumerator<TK, TV> | Advanced Algorithms",
    "keywords": "Class SeparateChainingDictionaryEnumerator<TK, TV> Inheritance Object SeparateChainingDictionaryEnumerator<TK, TV> Implements IEnumerator < DictionaryNode <TK, TV>> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SeparateChainingDictionaryEnumerator<TK, TV> : IEnumerator<DictionaryNode<TK, TV>>, IDisposable, IEnumerator Type Parameters Name Description TK TV Properties | Improve this Doc View Source Current Declaration public DictionaryNode<TK, TV> Current { get; } Property Value Type Description DictionaryNode <TK, TV> Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.PairingHeapNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.PairingHeapNode-1.html",
    "title": "Class PairingHeapNode<T> | Advanced Algorithms",
    "keywords": "Class PairingHeapNode<T> Inheritance Object PairingHeapNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class PairingHeapNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source PairingHeapNode(T) Declaration public PairingHeapNode(T value) Parameters Type Name Description T value Methods | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.OpenAddressHashSetEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.OpenAddressHashSetEnumerator-1.html",
    "title": "Class OpenAddressHashSetEnumerator<V> | Advanced Algorithms",
    "keywords": "Class OpenAddressHashSetEnumerator<V> Inheritance Object OpenAddressHashSetEnumerator<V> Implements IEnumerator < HashSetNode <V>> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class OpenAddressHashSetEnumerator<V> : IEnumerator<HashSetNode<V>>, IDisposable, IEnumerator Type Parameters Name Description V Constructors | Improve this Doc View Source OpenAddressHashSetEnumerator(HashSetNode<V>[], Int32) Declaration public OpenAddressHashSetEnumerator(HashSetNode<V>[] hashArray, int length) Parameters Type Name Description HashSetNode <V>[] hashArray Int32 length Properties | Improve this Doc View Source Current Declaration public HashSetNode<V> Current { get; } Property Value Type Description HashSetNode <V> Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.BinomialMinHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinomialMinHeap-1.html",
    "title": "Class BinomialMinHeap<T> | Advanced Algorithms",
    "keywords": "Class BinomialMinHeap<T> Inheritance Object BinomialMinHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinomialMinHeap<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source DecrementKey(BinomialHeapNode<T>) Update the Heap with new value for this node pointer O(log(n)) complexity Declaration public void DecrementKey(BinomialHeapNode<T> node) Parameters Type Name Description BinomialHeapNode <T> node | Improve this Doc View Source ExtractMin() O(log(n)) complexity Declaration public T ExtractMin() Returns Type Description T | Improve this Doc View Source Insert(T) O(log(n)) complexity Declaration public BinomialHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description BinomialHeapNode <T> | Improve this Doc View Source PeekMin() O(log(n)) complexity Declaration public T PeekMin() Returns Type Description T | Improve this Doc View Source Union(BinomialMinHeap<T>) Unions this heap with another O(log(n)) complexity Declaration public void Union(BinomialMinHeap<T> binomialHeap) Parameters Type Name Description BinomialMinHeap <T> binomialHeap"
  },
  "api/Advanced.Algorithms.DataStructures.BinaryTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinaryTree-1.html",
    "title": "Class BinaryTree<T> | Advanced Algorithms",
    "keywords": "Class BinaryTree<T> A complete binary tree implementation using pointers Inheritance Object BinaryTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinaryTree<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Root Declaration public BinaryTreeNode<T> Root { get; set; } Property Value Type Description BinaryTreeNode <T> Methods | Improve this Doc View Source Delete(T) only deletes unambiguous nodes (a node with two children cannot be deleted unambiguously) O(log(n)) worst O(n) for unbalanced tree Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source GetHeight() Declaration public int GetHeight() Returns Type Description Int32 | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T, T) only inserts to unambiguous nodes (a node with two children cannot be inserted with a new child unambiguously) O(log(n)) worst O(n) for unbalanced tree Declaration public void Insert(T parentValue, T newValue) Parameters Type Name Description T parentValue T newValue"
  },
  "api/Advanced.Algorithms.Compression.HuffmanCoding-1.html": {
    "href": "api/Advanced.Algorithms.Compression.HuffmanCoding-1.html",
    "title": "Class HuffmanCoding<T> | Advanced Algorithms",
    "keywords": "Class HuffmanCoding<T> A huffman coding implementation using Fibornacci Min Heap Inheritance Object HuffmanCoding<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Compression Assembly : Advanced.Algorithms.dll Syntax public class HuffmanCoding<T> Type Parameters Name Description T Methods | Improve this Doc View Source Compress(T[]) Returns a dictionary of chosen encoding bytes for each distinct T Declaration public Dictionary<T, byte[]> Compress(T[] input) Parameters Type Name Description T[] input Returns Type Description Dictionary <T, System.Byte []>"
  },
  "api/Advanced.Algorithms.Combinatorics.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.html",
    "title": "Namespace Advanced.Algorithms.Combinatorics | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Combinatorics Classes Combination Permutation Subset"
  },
  "api/Advanced.Algorithms.DataStructures.OpenAddressDictionaryEnumerator-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.OpenAddressDictionaryEnumerator-2.html",
    "title": "Class OpenAddressDictionaryEnumerator<TK, TV> | Advanced Algorithms",
    "keywords": "Class OpenAddressDictionaryEnumerator<TK, TV> Inheritance Object OpenAddressDictionaryEnumerator<TK, TV> Implements IEnumerator < DictionaryNode <TK, TV>> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class OpenAddressDictionaryEnumerator<TK, TV> : IEnumerator<DictionaryNode<TK, TV>>, IDisposable, IEnumerator Type Parameters Name Description TK TV Constructors | Improve this Doc View Source OpenAddressDictionaryEnumerator(DictionaryNode<TK, TV>[], Int32) Declaration public OpenAddressDictionaryEnumerator(DictionaryNode<TK, TV>[] hashArray, int length) Parameters Type Name Description DictionaryNode <TK, TV>[] hashArray Int32 length Properties | Improve this Doc View Source Current Declaration public DictionaryNode<TK, TV> Current { get; } Property Value Type Description DictionaryNode <TK, TV> Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.MinPriorityQueue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.MinPriorityQueue-1.html",
    "title": "Class MinPriorityQueue<T> | Advanced Algorithms",
    "keywords": "Class MinPriorityQueue<T> Inheritance Object MinPriorityQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class MinPriorityQueue<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Dequeue() Declaration public T Dequeue() Returns Type Description T | Improve this Doc View Source Enqueue(T) Declaration public void Enqueue(T queueItem) Parameters Type Name Description T queueItem"
  },
  "api/Advanced.Algorithms.DataStructures.HashSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.HashSet-1.html",
    "title": "Class HashSet<TV> | Advanced Algorithms",
    "keywords": "Class HashSet<TV> A hash table implementation (key value HashSet) with separate chaining TODO improve performance by using a Prime number greater than total elements as Bucket Size Inheritance Object HashSet<TV> Implements IEnumerable < HashSetNode <TV>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class HashSet<TV> : IEnumerable<HashSetNode<TV>>, IEnumerable Type Parameters Name Description TV Constructors | Improve this Doc View Source HashSet(HashSetType, Int32) Declaration public HashSet(HashSetType type = HashSetType.SeparateChaining, int initialBucketSize = 2) Parameters Type Name Description HashSetType type Int32 initialBucketSize Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(TV) Declaration public void Add(TV value) Parameters Type Name Description TV value | Improve this Doc View Source Clear() clear hash table Declaration public void Clear() | Improve this Doc View Source Contains(TV) Declaration public bool Contains(TV value) Parameters Type Name Description TV value Returns Type Description Boolean | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<HashSetNode<TV>> GetEnumerator() Returns Type Description IEnumerator < HashSetNode <TV>> | Improve this Doc View Source Remove(TV) Declaration public void Remove(TV value) Parameters Type Name Description TV value Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Classes DiGraph<T> A directed graph implementation using dynamically growinng/shrinking adjacency matrix array Graph<T> A directed graph implementation using dynamically growinng/shrinking adjacency matrix array WeightedDiGraph<T, TW> A weighted graph implementation using dynamically growinng/shrinking adjacency matrix array WeightedGraph<T, TW> A weighted graph implementation using dynamically growinng/shrinking adjacency matrix array"
  },
  "api/Advanced.Algorithms.Geometry.ClosestPointPair.html": {
    "href": "api/Advanced.Algorithms.Geometry.ClosestPointPair.html",
    "title": "Class ClosestPointPair | Advanced Algorithms",
    "keywords": "Class ClosestPointPair Inheritance Object ClosestPointPair Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class ClosestPointPair Methods | Improve this Doc View Source Find(List<Point>, Int32, Int32) Declaration public static double Find(List<Point> points, int left, int right) Parameters Type Name Description List < Point > points Int32 left Int32 right Returns Type Description Double | Improve this Doc View Source Find(List<Int32[]>) Declaration public static double Find(List<int[]> points) Parameters Type Name Description List < Int32 []> points Returns Type Description Double"
  },
  "api/Advanced.Algorithms.String.ZAlgorithm.html": {
    "href": "api/Advanced.Algorithms.String.ZAlgorithm.html",
    "title": "Class ZAlgorithm | Advanced Algorithms",
    "keywords": "Class ZAlgorithm Inheritance Object ZAlgorithm Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class ZAlgorithm Methods | Improve this Doc View Source Search(String, String) Returns the start index of first appearance of pattern in input string returns -1 if no match Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.String.html": {
    "href": "api/Advanced.Algorithms.String.html",
    "title": "Namespace Advanced.Algorithms.String | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.String Classes KMP Knuth–Morris–Pratt(KMP) search implementation ManachersPalindrome A Manacher's longest palindrome implementation RabinKarp ZAlgorithm"
  },
  "api/Advanced.Algorithms.String.RabinKarp.html": {
    "href": "api/Advanced.Algorithms.String.RabinKarp.html",
    "title": "Class RabinKarp | Advanced Algorithms",
    "keywords": "Class RabinKarp Inheritance Object RabinKarp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class RabinKarp Methods | Improve this Doc View Source Search(String, String) Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.String.ManachersPalindrome.html": {
    "href": "api/Advanced.Algorithms.String.ManachersPalindrome.html",
    "title": "Class ManachersPalindrome | Advanced Algorithms",
    "keywords": "Class ManachersPalindrome A Manacher's longest palindrome implementation Inheritance Object ManachersPalindrome Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class ManachersPalindrome Methods | Improve this Doc View Source FindLongestPalindrome(String) Declaration public int FindLongestPalindrome(string input) Parameters Type Name Description String input Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Search.BinarySearch.html": {
    "href": "api/Advanced.Algorithms.Search.BinarySearch.html",
    "title": "Class BinarySearch | Advanced Algorithms",
    "keywords": "Class BinarySearch Inheritance Object BinarySearch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class BinarySearch Methods | Improve this Doc View Source Search(Int32[], Int32) Declaration public static int Search(int[] input, int element) Parameters Type Name Description Int32 [] input Int32 element Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Miscellaneous.html": {
    "href": "api/Advanced.Algorithms.Miscellaneous.html",
    "title": "Namespace Advanced.Algorithms.Miscellaneous | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Miscellaneous Classes MatrixMultiplication"
  },
  "api/Advanced.Algorithms.DataStructures.TreapTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreapTree-1.html",
    "title": "Class TreapTree<T> | Advanced Algorithms",
    "keywords": "Class TreapTree<T> Inheritance Object TreapTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreapTree<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source FindMax() Declaration public T FindMax() Returns Type Description T | Improve this Doc View Source FindMin() Declaration public T FindMin() Returns Type Description T | Improve this Doc View Source GetHeight() Declaration public int GetHeight() Returns Type Description Int32 | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.TernarySearchTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TernarySearchTree-1.html",
    "title": "Class TernarySearchTree<T> | Advanced Algorithms",
    "keywords": "Class TernarySearchTree<T> Inheritance Object TernarySearchTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TernarySearchTree<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source TernarySearchTree() Declaration public TernarySearchTree() Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Contains(T[]) returns true if the entry exist Declaration public bool Contains(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean | Improve this Doc View Source Delete(T[]) deletes a record from this TernarySearchTree O(m) where m is the length of entry Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry | Improve this Doc View Source Insert(T[]) Insert a new record to this TernarySearchTree O(m) time complexity where m is the length of entry Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry | Improve this Doc View Source StartsWith(T[]) returns a list of records matching this prefix Declaration public List<T[]> StartsWith(T[] prefix) Parameters Type Name Description T[] prefix Returns Type Description List <T[]>"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyList | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyList Classes DiGraph<T> A directed graph implementation DiGraphVertex<T> Graph vertex Graph<T> A graph implementation GraphVertex<T> A graph vertex WeightedDiGraph<T, TW> A weighted graph implementation WeightedDiGraphVertex<T, TW> A weighted graph vertex WeightedGraph<T, TW> A weighted graph implementation WeightedGraphVertex<T, TW> A weighted graph vertex"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraphVertex-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraphVertex-2.html",
    "title": "Class WeightedGraphVertex<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedGraphVertex<T, TW> A weighted graph vertex Inheritance Object WeightedGraphVertex<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedGraphVertex<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors | Improve this Doc View Source WeightedGraphVertex(T) Declaration public WeightedGraphVertex(T value) Parameters Type Name Description T value Properties | Improve this Doc View Source Edges Declaration public Dictionary<WeightedGraphVertex<T, TW>, TW> Edges { get; set; } Property Value Type Description Dictionary < WeightedGraphVertex <T, TW>, TW> | Improve this Doc View Source Value Declaration public T Value { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.DoublyLinkedListEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DoublyLinkedListEnumerator-1.html",
    "title": "Class DoublyLinkedListEnumerator<T> | Advanced Algorithms",
    "keywords": "Class DoublyLinkedListEnumerator<T> Inheritance Object DoublyLinkedListEnumerator<T> Implements IEnumerator <T> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DoublyLinkedListEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.DictionaryType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DictionaryType.html",
    "title": "Enum DictionaryType | Advanced Algorithms",
    "keywords": "Enum DictionaryType Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public enum DictionaryType Fields Name Description OpenAddressing SeparateChaining"
  },
  "api/Advanced.Algorithms.Combinatorics.Subset.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Subset.html",
    "title": "Class Subset | Advanced Algorithms",
    "keywords": "Class Subset Inheritance Object Subset Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Subset Methods | Improve this Doc View Source Find<T>(List<T>) Declaration public static List<List<T>> Find<T>(List<T> input) Parameters Type Name Description List <T> input Returns Type Description List < List <T>> Type Parameters Name Description T"
  },
  "api/Advanced.Algorithms.Geometry.Line.html": {
    "href": "api/Advanced.Algorithms.Geometry.Line.html",
    "title": "Struct Line | Advanced Algorithms",
    "keywords": "Struct Line Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public struct Line Properties | Improve this Doc View Source x1 Declaration public double x1 { get; set; } Property Value Type Description Double | Improve this Doc View Source x2 Declaration public double x2 { get; set; } Property Value Type Description Double | Improve this Doc View Source y1 Declaration public double y1 { get; set; } Property Value Type Description Double | Improve this Doc View Source y2 Declaration public double y2 { get; set; } Property Value Type Description Double"
  },
  "api/Advanced.Algorithms.Geometry.ConvexHull.html": {
    "href": "api/Advanced.Algorithms.Geometry.ConvexHull.html",
    "title": "Class ConvexHull | Advanced Algorithms",
    "keywords": "Class ConvexHull Convex hull using jarvis's algorithm Inheritance Object ConvexHull Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class ConvexHull Methods | Improve this Doc View Source Find(List<Int32[]>) Declaration public static List<int[]> Find(List<int[]> points) Parameters Type Name Description List < Int32 []> points Returns Type Description List < Int32 []>"
  },
  "api/Advanced.Algorithms.DataStructures.TreeDictionary-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreeDictionary-2.html",
    "title": "Class TreeDictionary<TK, TV> | Advanced Algorithms",
    "keywords": "Class TreeDictionary<TK, TV> A Dictionary implementation using balanced binary search tree (log(n) operations in worst case) This may be better than regular Dictionary implementation which can give o(K) in worst case (but O(1) when collisions K is avoided ) Inheritance Object TreeDictionary<TK, TV> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreeDictionary<TK, TV> where TK : IComparable Type Parameters Name Description TK TV Constructors | Improve this Doc View Source TreeDictionary() Declaration public TreeDictionary() Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(TK, TV) Declaration public void Add(TK key, TV value) Parameters Type Name Description TK key TV value | Improve this Doc View Source ContainsKey(TK) Declaration public bool ContainsKey(TK key) Parameters Type Name Description TK key Returns Type Description Boolean | Improve this Doc View Source GetAll() Declaration public ArrayList<TreeDictionaryNode<TK, TV>> GetAll() Returns Type Description ArrayList < TreeDictionaryNode <TK, TV>> | Improve this Doc View Source GetValue(TK) Declaration public TV GetValue(TK key) Parameters Type Name Description TK key Returns Type Description TV | Improve this Doc View Source Remove(TK) Declaration public void Remove(TK key) Parameters Type Name Description TK key"
  },
  "api/Advanced.Algorithms.DataStructures.Tree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree-1.html",
    "title": "Class Tree<T> | Advanced Algorithms",
    "keywords": "Class Tree<T> Inheritance Object Tree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Tree<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source Delete(T, T) Declaration public void Delete(T parentValue, T value) Parameters Type Name Description T parentValue T value | Improve this Doc View Source GetHeight() Declaration public int GetHeight() Returns Type Description Int32 | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T, T) Declaration public void Insert(T parentValue, T value) Parameters Type Name Description T parentValue T value"
  },
  "api/Advanced.Algorithms.DataStructures.html": {
    "href": "api/Advanced.Algorithms.DataStructures.html",
    "title": "Namespace Advanced.Algorithms.DataStructures | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures Classes ArrayList<T> A self expanding array (dynamic array) aka array vector ArrayListEnumerator<T> AVLTree<T> BinaryTree<T> A complete binary tree implementation using pointers BinaryTreeNode<T> BinomialHeapNode<T> BinomialMaxHeap<T> BinomialMinHeap<T> BloomFilter<T> A simple bloom filter implementation in C# A probabilistic data structure as an alternative to HashSet Keeps track of given keys and returns answer to key exists query with very low probability of error BMaxHeap<T> BMinHeap<T> BpTree<T> A B+ Tree implementation TODO support initial bulk loading TODO: make sure duplicates are handled correctly if its not already BpTreeEnumerator<T> BST<T> BTree<T> CircularLinkedList<T> A singly linked list implementation CircularLinkedListEnumerator<T> CircularLinkedListNode<T> D_aryMaxHeap<T> D_aryMinHeap<T> Dictionary<TK, TV> A hash table implementation (key value dictionary) with separate chaining TODO improve performance by using a Prime number greater than total elements as Bucket Size DictionaryNode<TK, TV> key-value set DInterval<T> An interval object to represent multi-dimensional intervals DIntervalTree<T> A multi-dimensional interval tree implementation DisJointSet<T> A disjoint set implementation DoublyLinkedList<T> A singly linked list implementation DoublyLinkedListEnumerator<T> DoublyLinkedListNode<T> DRangeTree<T> range tree ExpressionTree<T> A Expression tree implementation (POSIX tree) FenwickTree<T> Fenwick Tree (Binary Indexed Tree) for prefix sum FibornacciHeapNode<T> FibornacciMaxHeap<T> FibornacciMinHeap<T> HashSet<TV> A hash table implementation (key value HashSet) with separate chaining TODO improve performance by using a Prime number greater than total elements as Bucket Size HashSetNode<TV> key-value set KDTree<T> A multiDimensional Kd tree implementation (Unbalanced) MaxPriorityQueue<T> MinPriorityQueue<T> OpenAddressDictionaryEnumerator<TK, TV> OpenAddressHashSetEnumerator<V> PairingHeapNode<T> PairingMaxHeap<T> PairingMinHeap<T> Queue<T> RedBlackTree<T> Red black tree implementation SegmentTree<T> SeparateChainingDictionaryEnumerator<TK, TV> SeparateChainingHashSetEnumerator<TV> SinglyLinkedList<T> A singly linked list implementation SinglyLinkedListNode<T> SkipList<T> SparseSet SplayTree<T> Stack<T> SuffixTree<T> A simple suffix tree implementation using a trie TernarySearchTree<T> TreapTree<T> Tree<T> TreeDictionary<TK, TV> A Dictionary implementation using balanced binary search tree (log(n) operations in worst case) This may be better than regular Dictionary implementation which can give o(K) in worst case (but O(1) when collisions K is avoided ) TreeDictionaryNode<TK, TV> TreeHashSet<V> A HashSet implementation using balanced binary search tree (log(n) operations in worst case) This may be better than regular HashSet implementation which can give o(K) in worst case (but O(1) when collisions K is avoided ) TreeNode<T> Trie<T> Interfaces IBSTNode<T> IDistanceCalculator<T> A concrete implementation of this interface is required when calling GetNearestNeigbour Enums DictionaryType HashSetType QueueType StackType"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraph-1.html",
    "title": "Class DiGraph<T> | Advanced Algorithms",
    "keywords": "Class DiGraph<T> A directed graph implementation Inheritance Object DiGraph<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class DiGraph<T> Type Parameters Name Description T Constructors | Improve this Doc View Source DiGraph() Constructor Declaration public DiGraph() Properties | Improve this Doc View Source ReferenceVertex return a reference vertex to start traversing Vertices O(1) complexity Declaration public DiGraphVertex<T> ReferenceVertex { get; } Property Value Type Description DiGraphVertex <T> | Improve this Doc View Source VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddEdge(T, T) add an edge from source to destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source AddVertex(T) add a new vertex to this graph O(1) complexity Declaration public DiGraphVertex<T> AddVertex(T value) Parameters Type Name Description T value Returns Type Description DiGraphVertex <T> | Improve this Doc View Source FindVertex(T) returns the vertex object with given value O(1) complexity Declaration public DiGraphVertex<T> FindVertex(T value) Parameters Type Name Description T value Returns Type Description DiGraphVertex <T> | Improve this Doc View Source GetAllInEdges(T) Declaration public List<T> GetAllInEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> | Improve this Doc View Source GetAllOutEdges(T) Declaration public List<T> GetAllOutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> | Improve this Doc View Source HasEdge(T, T) do we have an edge between the given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean | Improve this Doc View Source RemoveEdge(T, T) Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source RemoveVertex(T) remove an existing vertex frm graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.DIntervalTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DIntervalTree-1.html",
    "title": "Class DIntervalTree<T> | Advanced Algorithms",
    "keywords": "Class DIntervalTree<T> A multi-dimensional interval tree implementation Inheritance Object DIntervalTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DIntervalTree<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source DIntervalTree(Int32) Declaration public DIntervalTree(int dimensions) Parameters Type Name Description Int32 dimensions Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T[], T[]) delete this interval Declaration public void Delete(T[] start, T[] end) Parameters Type Name Description T[] start T[] end | Improve this Doc View Source DoOverlap(T[], T[]) does this interval overlap with any interval in this interval tree? Declaration public bool DoOverlap(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description Boolean | Improve this Doc View Source GetOverlaps(T[], T[]) returns a list of matching intervals Declaration public List<DInterval<T>> GetOverlaps(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List < DInterval <T>> | Improve this Doc View Source Insert(T[], T[]) Add a new interval to this interval tree Declaration public void Insert(T[] start, T[] end) Parameters Type Name Description T[] start T[] end"
  },
  "api/Advanced.Algorithms.DataStructures.ArrayListEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.ArrayListEnumerator-1.html",
    "title": "Class ArrayListEnumerator<T> | Advanced Algorithms",
    "keywords": "Class ArrayListEnumerator<T> Inheritance Object ArrayListEnumerator<T> Implements IEnumerator <T> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class ArrayListEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Constructors | Improve this Doc View Source ArrayListEnumerator(T[], Int32) Declaration public ArrayListEnumerator(T[] list, int length) Parameters Type Name Description T[] list Int32 length Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.BinomialMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinomialMaxHeap-1.html",
    "title": "Class BinomialMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class BinomialMaxHeap<T> Inheritance Object BinomialMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinomialMaxHeap<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ExtractMax() O(log(n)) complexity Declaration public T ExtractMax() Returns Type Description T | Improve this Doc View Source IncrementKey(BinomialHeapNode<T>) Update the Heap with new value for this node pointer O(log(n)) complexity Declaration public void IncrementKey(BinomialHeapNode<T> node) Parameters Type Name Description BinomialHeapNode <T> node | Improve this Doc View Source Insert(T) O(log(n)) complexity Declaration public BinomialHeapNode<T> Insert(T newItem) Parameters Type Name Description T newItem Returns Type Description BinomialHeapNode <T> | Improve this Doc View Source PeekMax() O(log(n)) complexity Declaration public T PeekMax() Returns Type Description T | Improve this Doc View Source Union(BinomialMaxHeap<T>) Unions this heap with another O(log(n)) complexity Declaration public void Union(BinomialMaxHeap<T> binomialHeap) Parameters Type Name Description BinomialMaxHeap <T> binomialHeap"
  },
  "api/Advanced.Algorithms.DataStructures.AVLTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.AVLTree-1.html",
    "title": "Class AVLTree<T> | Advanced Algorithms",
    "keywords": "Class AVLTree<T> Inheritance Object AVLTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class AVLTree<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Contains(T) Declaration public bool Contains(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source FindMax() Declaration public T FindMax() Returns Type Description T | Improve this Doc View Source FindMin() Declaration public T FindMin() Returns Type Description T | Improve this Doc View Source GetHeight() Declaration public int GetHeight() Returns Type Description Int32 | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.Compression.html": {
    "href": "api/Advanced.Algorithms.Compression.html",
    "title": "Namespace Advanced.Algorithms.Compression | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Compression Classes HuffmanCoding<T> A huffman coding implementation using Fibornacci Min Heap"
  },
  "api/Advanced.Algorithms.Combinatorics.Permutation.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Permutation.html",
    "title": "Class Permutation | Advanced Algorithms",
    "keywords": "Class Permutation Inheritance Object Permutation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Permutation Methods | Improve this Doc View Source Find<T>(List<T>, Int32, Boolean) Declaration public static List<List<T>> Find<T>(List<T> input, int r, bool withRepetition = false) Parameters Type Name Description List <T> input Int32 r Boolean withRepetition Returns Type Description List < List <T>> Type Parameters Name Description T"
  },
  "api/Advanced.Algorithms.Sorting.ShellSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.ShellSort-1.html",
    "title": "Class ShellSort<T> | Advanced Algorithms",
    "keywords": "Class ShellSort<T> A shell sort implementation Inheritance Object ShellSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class ShellSort<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Sort(T[]) Sort given integers Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.SelectionSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.SelectionSort-1.html",
    "title": "Class SelectionSort<T> | Advanced Algorithms",
    "keywords": "Class SelectionSort<T> Inheritance Object SelectionSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class SelectionSort<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.RadixSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.RadixSort.html",
    "title": "Class RadixSort | Advanced Algorithms",
    "keywords": "Class RadixSort A radix sort implementation Inheritance Object RadixSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class RadixSort Methods | Improve this Doc View Source Sort(Int32[]) Sort given integers Declaration public static int[] Sort(int[] array) Parameters Type Name Description Int32 [] array Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.QuickSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.QuickSort-1.html",
    "title": "Class QuickSort<T> | Advanced Algorithms",
    "keywords": "Class QuickSort<T> Inheritance Object QuickSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class QuickSort<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Sort(T[]) Declaration public static T[] Sort(T[] array) Parameters Type Name Description T[] array Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.DataStructures.HashSetType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.HashSetType.html",
    "title": "Enum HashSetType | Advanced Algorithms",
    "keywords": "Enum HashSetType Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public enum HashSetType Fields Name Description OpenAddressing SeparateChaining"
  },
  "api/Advanced.Algorithms.DataStructures.HashSetNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.HashSetNode-1.html",
    "title": "Class HashSetNode<TV> | Advanced Algorithms",
    "keywords": "Class HashSetNode<TV> key-value set Inheritance Object HashSetNode<TV> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class HashSetNode<TV> Type Parameters Name Description TV Constructors | Improve this Doc View Source HashSetNode(TV) Declaration public HashSetNode(TV value) Parameters Type Name Description TV value Fields | Improve this Doc View Source Value Declaration public TV Value Field Value Type Description TV"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.Graph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.Graph-1.html",
    "title": "Class Graph<T> | Advanced Algorithms",
    "keywords": "Class Graph<T> A directed graph implementation using dynamically growinng/shrinking adjacency matrix array Inheritance Object Graph<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class Graph<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Graph() Declaration public Graph() Properties | Improve this Doc View Source VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddEdge(T, T) add an edge from source to destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source AddVertex(T) add a new vertex to this graph O(1) complexity Declaration public void AddVertex(T value) Parameters Type Name Description T value | Improve this Doc View Source GetAllEdges(T) Declaration public List<T> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> | Improve this Doc View Source HasEdge(T, T) do we have an edge between the given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean | Improve this Doc View Source RemoveEdge(T, T) Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source RemoveVertex(T) remove an existing vertex from graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.DiGraph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.DiGraph-1.html",
    "title": "Class DiGraph<T> | Advanced Algorithms",
    "keywords": "Class DiGraph<T> A directed graph implementation using dynamically growinng/shrinking adjacency matrix array Inheritance Object DiGraph<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class DiGraph<T> Type Parameters Name Description T Constructors | Improve this Doc View Source DiGraph() Declaration public DiGraph() Properties | Improve this Doc View Source VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddEdge(T, T) add an edge from source to destination vertex O(1) complexity Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source AddVertex(T) add a new vertex to this graph O(1) complexity Declaration public void AddVertex(T value) Parameters Type Name Description T value | Improve this Doc View Source GetAllInEdges(T) Declaration public List<T> GetAllInEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> | Improve this Doc View Source GetAllOutEdges(T) Declaration public List<T> GetAllOutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> | Improve this Doc View Source HasEdge(T, T) do we have an edge between the given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean | Improve this Doc View Source RemoveEdge(T, T) Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source RemoveVertex(T) remove an existing vertex from graph O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.Geometry.Point.html": {
    "href": "api/Advanced.Algorithms.Geometry.Point.html",
    "title": "Struct Point | Advanced Algorithms",
    "keywords": "Struct Point Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public struct Point Properties | Improve this Doc View Source x Declaration public double x { get; set; } Property Value Type Description Double | Improve this Doc View Source y Declaration public double y { get; set; } Property Value Type Description Double"
  },
  "api/Advanced.Algorithms.Geometry.LineIntersection.html": {
    "href": "api/Advanced.Algorithms.Geometry.LineIntersection.html",
    "title": "Class LineIntersection | Advanced Algorithms",
    "keywords": "Class LineIntersection Inheritance Object LineIntersection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class LineIntersection Methods | Improve this Doc View Source FindIntersection(Line, Line, Double) Returns Point of intersection if do intersect otherwise default Point (null) Declaration public static Point FindIntersection(Line lineA, Line lineB, double tolerance = 0.001) Parameters Type Name Description Line lineA Line lineB Double tolerance precision tolerance. Returns Type Description Point The point of intersection."
  },
  "api/Advanced.Algorithms.DataStructures.BpTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BpTree-1.html",
    "title": "Class BpTree<T> | Advanced Algorithms",
    "keywords": "Class BpTree<T> A B+ Tree implementation TODO support initial bulk loading TODO: make sure duplicates are handled correctly if its not already Inheritance Object BpTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BpTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source BpTree(Int32) Declaration public BpTree(int maxKeysPerNode) Parameters Type Name Description Int32 maxKeysPerNode Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Max Declaration public T Max { get; } Property Value Type Description T | Improve this Doc View Source Min Declaration public T Min { get; } Property Value Type Description T Methods | Improve this Doc View Source Delete(T) Delete the given value from this BPTree Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T) Inserts and element to B-Tree Declaration public void Insert(T newValue) Parameters Type Name Description T newValue Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BloomFilter-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BloomFilter-1.html",
    "title": "Class BloomFilter<T> | Advanced Algorithms",
    "keywords": "Class BloomFilter<T> A simple bloom filter implementation in C# A probabilistic data structure as an alternative to HashSet Keeps track of given keys and returns answer to key exists query with very low probability of error Inheritance Object BloomFilter<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BloomFilter<T> Type Parameters Name Description T Constructors | Improve this Doc View Source BloomFilter(Int32) Higher the size lower the collision and failure probablity Declaration public BloomFilter(int size) Parameters Type Name Description Int32 size Methods | Improve this Doc View Source AddKey(T) Run time complexity is O(1) Declaration public void AddKey(T key) Parameters Type Name Description T key | Improve this Doc View Source KeyExists(T) Run time complexity is O(1) Declaration public bool KeyExists(T key) Parameters Type Name Description T key Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Sorting.SortAlmostSorted.html": {
    "href": "api/Advanced.Algorithms.Sorting.SortAlmostSorted.html",
    "title": "Class SortAlmostSorted | Advanced Algorithms",
    "keywords": "Class SortAlmostSorted Inheritance Object SortAlmostSorted Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class SortAlmostSorted Methods | Improve this Doc View Source Sort(Int32[], Int32) Sort the given input where elements are misplaced almost by a distance k Declaration public static int[] Sort(int[] input, int k) Parameters Type Name Description Int32 [] input Int32 k Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.DataStructures.SinglyLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SinglyLinkedListNode-1.html",
    "title": "Class SinglyLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class SinglyLinkedListNode<T> Inheritance Object SinglyLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SinglyLinkedListNode<T> Type Parameters Name Description T Constructors | Improve this Doc View Source SinglyLinkedListNode(T) Declaration public SinglyLinkedListNode(T data) Parameters Type Name Description T data Fields | Improve this Doc View Source Data Declaration public T Data Field Value Type Description T | Improve this Doc View Source Next Declaration public SinglyLinkedListNode<T> Next Field Value Type Description SinglyLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.SinglyLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SinglyLinkedList-1.html",
    "title": "Class SinglyLinkedList<T> | Advanced Algorithms",
    "keywords": "Class SinglyLinkedList<T> A singly linked list implementation Inheritance Object SinglyLinkedList<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SinglyLinkedList<T> Type Parameters Name Description T Fields | Improve this Doc View Source Head Declaration public SinglyLinkedListNode<T> Head Field Value Type Description SinglyLinkedListNode <T> Methods | Improve this Doc View Source Count() Declaration public int Count() Returns Type Description Int32 | Improve this Doc View Source Delete(T) Declaration public void Delete(T data) Parameters Type Name Description T data | Improve this Doc View Source DeleteAll() Declaration public void DeleteAll() | Improve this Doc View Source DeleteFirst() Declaration public T DeleteFirst() Returns Type Description T | Improve this Doc View Source DeleteLast() Declaration public T DeleteLast() Returns Type Description T | Improve this Doc View Source GetAllNodes() Declaration public List<T> GetAllNodes() Returns Type Description List <T> | Improve this Doc View Source InsertFirst(T) Declaration public void InsertFirst(T data) Parameters Type Name Description T data | Improve this Doc View Source InsertFirst(SinglyLinkedListNode<T>) Inserts this element to the begining Declaration public void InsertFirst(SinglyLinkedListNode<T> current) Parameters Type Name Description SinglyLinkedListNode <T> current | Improve this Doc View Source InsertLast(T) Declaration public void InsertLast(T data) Parameters Type Name Description T data | Improve this Doc View Source IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.DataStructures.IDistanceCalculator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.IDistanceCalculator-1.html",
    "title": "Interface IDistanceCalculator<T> | Advanced Algorithms",
    "keywords": "Interface IDistanceCalculator<T> A concrete implementation of this interface is required when calling GetNearestNeigbour Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public interface IDistanceCalculator<T> where T : IComparable Type Parameters Name Description T Methods | Improve this Doc View Source Compare(T, T, T[], T[]) Compare distance between point a to b and eucledian distance betwen point start to end Declaration int Compare(T a, T b, T[] start, T[] end) Parameters Type Name Description T a T b T[] start T[] end Returns Type Description Int32 similar result as IComparable | Improve this Doc View Source Compare(T[], T[], T[]) Compare eucledian distance between point a to point and point b to point Declaration int Compare(T[] a, T[] b, T[] point) Parameters Type Name Description T[] a T[] b T[] point Returns Type Description Int32 similar result as IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.IBSTNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.IBSTNode-1.html",
    "title": "Interface IBSTNode<T> | Advanced Algorithms",
    "keywords": "Interface IBSTNode<T> Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public interface IBSTNode<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Left Declaration IBSTNode<T> Left { get; } Property Value Type Description IBSTNode <T> | Improve this Doc View Source Right Declaration IBSTNode<T> Right { get; } Property Value Type Description IBSTNode <T> | Improve this Doc View Source Value Declaration T Value { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.DoublyLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DoublyLinkedListNode-1.html",
    "title": "Class DoublyLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class DoublyLinkedListNode<T> Inheritance Object DoublyLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DoublyLinkedListNode<T> Type Parameters Name Description T Constructors | Improve this Doc View Source DoublyLinkedListNode(T) Declaration public DoublyLinkedListNode(T data) Parameters Type Name Description T data Fields | Improve this Doc View Source Data Declaration public T Data Field Value Type Description T | Improve this Doc View Source Next Declaration public DoublyLinkedListNode<T> Next Field Value Type Description DoublyLinkedListNode <T> | Improve this Doc View Source Previous Declaration public DoublyLinkedListNode<T> Previous Field Value Type Description DoublyLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.CircularLinkedListEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.CircularLinkedListEnumerator-1.html",
    "title": "Class CircularLinkedListEnumerator<T> | Advanced Algorithms",
    "keywords": "Class CircularLinkedListEnumerator<T> Inheritance Object CircularLinkedListEnumerator<T> Implements IEnumerator <T> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class CircularLinkedListEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.BinaryTreeNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinaryTreeNode-1.html",
    "title": "Class BinaryTreeNode<T> | Advanced Algorithms",
    "keywords": "Class BinaryTreeNode<T> Inheritance Object BinaryTreeNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinaryTreeNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source BinaryTreeNode(BinaryTreeNode<T>, T) Declaration public BinaryTreeNode(BinaryTreeNode<T> parent, T value) Parameters Type Name Description BinaryTreeNode <T> parent T value Properties | Improve this Doc View Source IsLeaf Declaration public bool IsLeaf { get; } Property Value Type Description Boolean | Improve this Doc View Source Left Declaration public BinaryTreeNode<T> Left { get; set; } Property Value Type Description BinaryTreeNode <T> | Improve this Doc View Source Parent Declaration public BinaryTreeNode<T> Parent { get; set; } Property Value Type Description BinaryTreeNode <T> | Improve this Doc View Source Right Declaration public BinaryTreeNode<T> Right { get; set; } Property Value Type Description BinaryTreeNode <T> | Improve this Doc View Source Value Declaration public T Value { get; set; } Property Value Type Description T Methods | Improve this Doc View Source CompareTo(BinaryTreeNode<T>) Declaration public int CompareTo(BinaryTreeNode<T> node) Parameters Type Name Description BinaryTreeNode <T> node Returns Type Description Int32 | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraph-2.html",
    "title": "Class WeightedDiGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedDiGraph<T, TW> A weighted graph implementation Inheritance Object WeightedDiGraph<T, TW> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedDiGraph<T, TW> where TW : IComparable Type Parameters Name Description T TW Constructors | Improve this Doc View Source WeightedDiGraph() Constructor Declaration public WeightedDiGraph() Properties | Improve this Doc View Source ReferenceVertex return a reference vertex to start traversing Vertices O(1) complexity Declaration public WeightedDiGraphVertex<T, TW> ReferenceVertex { get; } Property Value Type Description WeightedDiGraphVertex <T, TW> | Improve this Doc View Source VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddEdge(T, T, TW) Add a new edge to this graph O(1) complexity Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight | Improve this Doc View Source AddVertex(T) Add a new vertex to this graph O(1) complexity Declaration public WeightedDiGraphVertex<T, TW> AddVertex(T value) Parameters Type Name Description T value Returns Type Description WeightedDiGraphVertex <T, TW> | Improve this Doc View Source FindVertex(T) returns the vertex with given value O(1) complexity Declaration public WeightedDiGraphVertex<T, TW> FindVertex(T value) Parameters Type Name Description T value Returns Type Description WeightedDiGraphVertex <T, TW> | Improve this Doc View Source GetAllInEdges(T) Declaration public List<Tuple<T, TW>> GetAllInEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> | Improve this Doc View Source GetAllOutEdges(T) Declaration public List<Tuple<T, TW>> GetAllOutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < System.Tuple <T, TW>> | Improve this Doc View Source HasEdge(T, T) do we have an edge between given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean | Improve this Doc View Source RemoveEdge(T, T) remove the given edge from this graph O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source RemoveVertex(T) remove the given vertex O(V) complexity Declaration public void RemoveVertex(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.GraphVertex-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.GraphVertex-1.html",
    "title": "Class GraphVertex<T> | Advanced Algorithms",
    "keywords": "Class GraphVertex<T> A graph vertex Inheritance Object GraphVertex<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class GraphVertex<T> Type Parameters Name Description T Constructors | Improve this Doc View Source GraphVertex(T) Declaration public GraphVertex(T value) Parameters Type Name Description T value Properties | Improve this Doc View Source Edges Declaration public HashSet<GraphVertex<T>> Edges { get; set; } Property Value Type Description HashSet < GraphVertex <T>> | Improve this Doc View Source Value Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.FenwickTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.FenwickTree-1.html",
    "title": "Class FenwickTree<T> | Advanced Algorithms",
    "keywords": "Class FenwickTree<T> Fenwick Tree (Binary Indexed Tree) for prefix sum Inheritance Object FenwickTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class FenwickTree<T> Type Parameters Name Description T Constructors | Improve this Doc View Source FenwickTree(T[], Func<T, T, T>) constructs a Fenwick tree using the specified sum operation function Declaration public FenwickTree(T[] input, Func<T, T, T> sumOperation) Parameters Type Name Description T[] input Func <T, T, T> sumOperation Methods | Improve this Doc View Source GetPrefixSum(Int32) get prefix sum from 0 till end index Declaration public T GetPrefixSum(int endIndex) Parameters Type Name Description Int32 endIndex Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.ExpressionTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.ExpressionTree-1.html",
    "title": "Class ExpressionTree<T> | Advanced Algorithms",
    "keywords": "Class ExpressionTree<T> A Expression tree implementation (POSIX tree) Inheritance Object ExpressionTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class ExpressionTree<T> Type Parameters Name Description T Methods | Improve this Doc View Source Construct(T[], T[]) construct tree for given expression with given operators Declaration public void Construct(T[] expression, T[] operators) Parameters Type Name Description T[] expression T[] operators | Improve this Doc View Source GetInfix() get infix expression Declaration public List<T> GetInfix() Returns Type Description List <T>"
  },
  "api/Advanced.Algorithms.DataStructures.DoublyLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DoublyLinkedList-1.html",
    "title": "Class DoublyLinkedList<T> | Advanced Algorithms",
    "keywords": "Class DoublyLinkedList<T> A singly linked list implementation Inheritance Object DoublyLinkedList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DoublyLinkedList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Fields | Improve this Doc View Source Head Declaration public DoublyLinkedListNode<T> Head Field Value Type Description DoublyLinkedListNode <T> | Improve this Doc View Source Tail Declaration public DoublyLinkedListNode<T> Tail Field Value Type Description DoublyLinkedListNode <T> Methods | Improve this Doc View Source Count() Declaration public int Count() Returns Type Description Int32 | Improve this Doc View Source Delete(T) search for first T and delete Declaration public void Delete(T data) Parameters Type Name Description T data | Improve this Doc View Source Delete(DoublyLinkedListNode<T>) deletes this given node Declaration public void Delete(DoublyLinkedListNode<T> node) Parameters Type Name Description DoublyLinkedListNode <T> node | Improve this Doc View Source DeleteAll() Declaration public void DeleteAll() | Improve this Doc View Source DeleteFirst() Declaration public T DeleteFirst() Returns Type Description T | Improve this Doc View Source DeleteLast() Declaration public T DeleteLast() Returns Type Description T | Improve this Doc View Source GetAllNodes() Declaration public List<T> GetAllNodes() Returns Type Description List <T> | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source InsertAfter(DoublyLinkedListNode<T>, DoublyLinkedListNode<T>) Insert right after this node Declaration public DoublyLinkedListNode<T> InsertAfter(DoublyLinkedListNode<T> node, DoublyLinkedListNode<T> data) Parameters Type Name Description DoublyLinkedListNode <T> node DoublyLinkedListNode <T> data Returns Type Description DoublyLinkedListNode <T> | Improve this Doc View Source InsertBefore(DoublyLinkedListNode<T>, DoublyLinkedListNode<T>) Insert right before this node Declaration public DoublyLinkedListNode<T> InsertBefore(DoublyLinkedListNode<T> node, DoublyLinkedListNode<T> data) Parameters Type Name Description DoublyLinkedListNode <T> node DoublyLinkedListNode <T> data Returns Type Description DoublyLinkedListNode <T> | Improve this Doc View Source InsertFirst(T) Declaration public DoublyLinkedListNode<T> InsertFirst(T data) Parameters Type Name Description T data Returns Type Description DoublyLinkedListNode <T> | Improve this Doc View Source InsertLast(T) Declaration public DoublyLinkedListNode<T> InsertLast(T data) Parameters Type Name Description T data Returns Type Description DoublyLinkedListNode <T> | Improve this Doc View Source IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.DictionaryNode-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DictionaryNode-2.html",
    "title": "Class DictionaryNode<TK, TV> | Advanced Algorithms",
    "keywords": "Class DictionaryNode<TK, TV> key-value set Inheritance Object DictionaryNode<TK, TV> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DictionaryNode<TK, TV> Type Parameters Name Description TK TV Constructors | Improve this Doc View Source DictionaryNode(TK, TV) Declaration public DictionaryNode(TK key, TV value) Parameters Type Name Description TK key TV value Fields | Improve this Doc View Source Key Declaration public TK Key Field Value Type Description TK | Improve this Doc View Source Value Declaration public TV Value Field Value Type Description TV"
  },
  "api/Advanced.Algorithms.DataStructures.CircularLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.CircularLinkedList-1.html",
    "title": "Class CircularLinkedList<T> | Advanced Algorithms",
    "keywords": "Class CircularLinkedList<T> A singly linked list implementation Inheritance Object CircularLinkedList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class CircularLinkedList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Fields | Improve this Doc View Source ReferenceNode Declaration public CircularLinkedListNode<T> ReferenceNode Field Value Type Description CircularLinkedListNode <T> Methods | Improve this Doc View Source Count() Declaration public int Count() Returns Type Description Int32 | Improve this Doc View Source Delete(T) Declaration public void Delete(T data) Parameters Type Name Description T data | Improve this Doc View Source Delete(CircularLinkedListNode<T>) Declaration public void Delete(CircularLinkedListNode<T> current) Parameters Type Name Description CircularLinkedListNode <T> current | Improve this Doc View Source DeleteAll() Declaration public void DeleteAll() | Improve this Doc View Source GetAllNodes() Declaration public List<T> GetAllNodes() Returns Type Description List <T> | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source Insert(T) Declaration public CircularLinkedListNode<T> Insert(T data) Parameters Type Name Description T data Returns Type Description CircularLinkedListNode <T> | Improve this Doc View Source IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BpTreeEnumerator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BpTreeEnumerator-1.html",
    "title": "Class BpTreeEnumerator<T> | Advanced Algorithms",
    "keywords": "Class BpTreeEnumerator<T> Inheritance Object BpTreeEnumerator<T> Implements IEnumerator <T> IDisposable IEnumerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BpTreeEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source BpTreeEnumerator(BpTree<T>) Declaration public BpTreeEnumerator(BpTree<T> tree) Parameters Type Name Description BpTree <T> tree Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.Graph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.Graph-1.html",
    "title": "Class Graph<T> | Advanced Algorithms",
    "keywords": "Class Graph<T> A graph implementation Inheritance Object Graph<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class Graph<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Graph() Constructor Declaration public Graph() Properties | Improve this Doc View Source ReferenceVertex return a reference vertex to start traversing Vertices O(1) complexity Declaration public GraphVertex<T> ReferenceVertex { get; } Property Value Type Description GraphVertex <T> | Improve this Doc View Source VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddEdge(T, T) add and edge to this graph O(1) complexity Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source AddVertex(T) add a new vertex to this graph O(1) complexity Declaration public GraphVertex<T> AddVertex(T value) Parameters Type Name Description T value Returns Type Description GraphVertex <T> | Improve this Doc View Source FindVertex(T) returns the vertex object with given value O(1) complexity Declaration public GraphVertex<T> FindVertex(T value) Parameters Type Name Description T value Returns Type Description GraphVertex <T> | Improve this Doc View Source GetAllEdges(T) Declaration public List<T> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List <T> | Improve this Doc View Source HasEdge(T, T) do we have an edge between given source and destination? O(1) complexity Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean | Improve this Doc View Source RemoveEdge(T, T) remove an edge from this graph O(1) complexity Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest | Improve this Doc View Source RemoveVertex(T) remove an existing vertex from this graph O(V) complexity Declaration public void RemoveVertex(T vertex) Parameters Type Name Description T vertex"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraphVertex-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraphVertex-1.html",
    "title": "Class DiGraphVertex<T> | Advanced Algorithms",
    "keywords": "Class DiGraphVertex<T> Graph vertex Inheritance Object DiGraphVertex<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class DiGraphVertex<T> Type Parameters Name Description T Constructors | Improve this Doc View Source DiGraphVertex(T) Declaration public DiGraphVertex(T value) Parameters Type Name Description T value Properties | Improve this Doc View Source InEdges Declaration public HashSet<DiGraphVertex<T>> InEdges { get; set; } Property Value Type Description HashSet < DiGraphVertex <T>> | Improve this Doc View Source OutEdges Declaration public HashSet<DiGraphVertex<T>> OutEdges { get; set; } Property Value Type Description HashSet < DiGraphVertex <T>> | Improve this Doc View Source Value Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.D_aryMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.D_aryMaxHeap-1.html",
    "title": "Class D_aryMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class D_aryMaxHeap<T> Inheritance Object D_aryMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class D_aryMaxHeap<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source D_aryMaxHeap(Int32, IEnumerable<T>) Declaration public D_aryMaxHeap(int k, IEnumerable<T> initial = null) Parameters Type Name Description Int32 k IEnumerable <T> initial Fields | Improve this Doc View Source Count Declaration public int Count Field Value Type Description Int32 Methods | Improve this Doc View Source ExtractMax() Declaration public T ExtractMax() Returns Type Description T | Improve this Doc View Source Insert(T) Declaration public void Insert(T newItem) Parameters Type Name Description T newItem | Improve this Doc View Source PeekMax() Declaration public T PeekMax() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.DRangeTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DRangeTree-1.html",
    "title": "Class DRangeTree<T> | Advanced Algorithms",
    "keywords": "Class DRangeTree<T> range tree Inheritance Object DRangeTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DRangeTree<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source DRangeTree(Int32) Declaration public DRangeTree(int dimensions) Parameters Type Name Description Int32 dimensions Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T[]) Declaration public void Delete(T[] value) Parameters Type Name Description T[] value | Improve this Doc View Source GetInRange(T[], T[]) Get all points within given range Declaration public List<T[]> GetInRange(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List <T[]> | Improve this Doc View Source Insert(T[]) Declaration public void Insert(T[] value) Parameters Type Name Description T[] value"
  },
  "api/Advanced.Algorithms.DataStructures.Stack-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Stack-1.html",
    "title": "Class Stack<T> | Advanced Algorithms",
    "keywords": "Class Stack<T> Inheritance Object Stack<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Stack<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Stack(StackType) Declaration public Stack(StackType type = StackType.Array) Parameters Type Name Description StackType type Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Peek() Declaration public T Peek() Returns Type Description T | Improve this Doc View Source Pop() Declaration public T Pop() Returns Type Description T | Improve this Doc View Source Push(T) Declaration public void Push(T item) Parameters Type Name Description T item"
  },
  "api/Advanced.Algorithms.DataStructures.SplayTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SplayTree-1.html",
    "title": "Class SplayTree<T> | Advanced Algorithms",
    "keywords": "Class SplayTree<T> Inheritance Object SplayTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SplayTree<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source FindMax() Declaration public T FindMax() Returns Type Description T | Improve this Doc View Source FindMin() Declaration public T FindMin() Returns Type Description T | Improve this Doc View Source GetHeight() Declaration public int GetHeight() Returns Type Description Int32 | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.SegmentTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SegmentTree-1.html",
    "title": "Class SegmentTree<T> | Advanced Algorithms",
    "keywords": "Class SegmentTree<T> Inheritance Object SegmentTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SegmentTree<T> Type Parameters Name Description T Constructors | Improve this Doc View Source SegmentTree(T[], Func<T, T, T>, Func<T>) constructs a segment tree using the specified operation function Operation function is the criteria for range queries For example operation function can return Max, Min or Sum of the two input elements Default value is a void value that will eliminate a node during operation comparisons For example if operation return min value default value will be largest value (int.Max for if T is int) or default value will be 0 if operation is sum Declaration public SegmentTree(T[] input, Func<T, T, T> operation, Func<T> defaultValue) Parameters Type Name Description T[] input Func <T, T, T> operation Func <T> defaultValue Methods | Improve this Doc View Source GetRangeResult(Int32, Int32) Declaration public T GetRangeResult(int startIndex, int endIndex) Parameters Type Name Description Int32 startIndex Int32 endIndex Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.RedBlackTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.RedBlackTree-1.html",
    "title": "Class RedBlackTree<T> | Advanced Algorithms",
    "keywords": "Class RedBlackTree<T> Red black tree implementation Inheritance Object RedBlackTree<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class RedBlackTree<T> where T : IComparable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Delete(T) Declaration public void Delete(T value) Parameters Type Name Description T value | Improve this Doc View Source FindMax() Declaration public T FindMax() Returns Type Description T | Improve this Doc View Source FindMin() Declaration public T FindMin() Returns Type Description T | Improve this Doc View Source GetHeight() Declaration public int GetHeight() Returns Type Description Int32 | Improve this Doc View Source HasItem(T) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean | Improve this Doc View Source Insert(T) Declaration public void Insert(T value) Parameters Type Name Description T value"
  },
  "api/Advanced.Algorithms.DataStructures.BMaxHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BMaxHeap-1.html",
    "title": "Class BMaxHeap<T> | Advanced Algorithms",
    "keywords": "Class BMaxHeap<T> Inheritance Object BMaxHeap<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BMaxHeap<T> where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source BMaxHeap(IEnumerable<T>) Initialize with optional init value Declaration public BMaxHeap(IEnumerable<T> initial = null) Parameters Type Name Description IEnumerable <T> initial Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ExtractMax() Declaration public T ExtractMax() Returns Type Description T | Improve this Doc View Source Insert(T) Declaration public void Insert(T newItem) Parameters Type Name Description T newItem | Improve this Doc View Source PeekMax() Declaration public T PeekMax() Returns Type Description T"
  },
  "api/Advanced.Algorithms.DataStructures.BinomialHeapNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinomialHeapNode-1.html",
    "title": "Class BinomialHeapNode<T> | Advanced Algorithms",
    "keywords": "Class BinomialHeapNode<T> Inheritance Object BinomialHeapNode<T> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinomialHeapNode<T> : IComparable where T : IComparable Type Parameters Name Description T Constructors | Improve this Doc View Source BinomialHeapNode(T) Declaration public BinomialHeapNode(T value) Parameters Type Name Description T value Methods | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.DataStructures.ArrayList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.ArrayList-1.html",
    "title": "Class ArrayList<T> | Advanced Algorithms",
    "keywords": "Class ArrayList<T> A self expanding array (dynamic array) aka array vector Inheritance Object ArrayList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class ArrayList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc View Source ArrayList(IEnumerable<T>) Overloaded constructor Declaration public ArrayList(IEnumerable<T> initial) Parameters Type Name Description IEnumerable <T> initial | Improve this Doc View Source ArrayList(Int32, IEnumerable<T>) Declaration public ArrayList(int initalArraySize = 2, IEnumerable<T> initial = null) Parameters Type Name Description Int32 initalArraySize IEnumerable <T> initial Properties | Improve this Doc View Source Item[Int32] Expose indexer Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item | Improve this Doc View Source AddRange(T[]) Add's the given array to the end Declaration public void AddRange(T[] array) Parameters Type Name Description T[] array | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source InsertAt(Int32, T) Insert element at specified index Declaration public void InsertAt(int index, T item) Parameters Type Name Description Int32 index T item | Improve this Doc View Source RemoveItem(Int32) Declaration public void RemoveItem(int i) Parameters Type Name Description Int32 i | Improve this Doc View Source ToArray() Returns as an array Declaration public T[] ToArray() Returns Type Description T[] Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.Combinatorics.Combination.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Combination.html",
    "title": "Class Combination | Advanced Algorithms",
    "keywords": "Class Combination Inheritance Object Combination Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Combination Methods | Improve this Doc View Source Find<T>(List<T>, Int32, Boolean) Declaration public static List<List<T>> Find<T>(List<T> input, int r, bool withRepetition) Parameters Type Name Description List <T> input Int32 r Boolean withRepetition Returns Type Description List < List <T>> Type Parameters Name Description T"
  }
}